/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2021-01-04 11:17:18.753619
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49;
x0=IKsin(j[0]);
x1=IKcos(j[3]);
x2=IKcos(j[0]);
x3=IKsin(j[3]);
x4=IKcos(j[2]);
x5=IKsin(j[1]);
x6=IKcos(j[1]);
x7=IKsin(j[2]);
x8=IKsin(j[5]);
x9=IKcos(j[5]);
x10=IKcos(j[4]);
x11=IKsin(j[4]);
x12=((0.21)*x2);
x13=((0.1195)*x6);
x14=((1.0)*x2);
x15=((1.0)*x1);
x16=((0.005)*x5);
x17=((1.0)*x0);
x18=((0.55)*x5);
x19=((0.005)*x2);
x20=((0.7035)*x2);
x21=((0.1195)*x2);
x22=((0.1195)*x0);
x23=((0.1195)*x1);
x24=((-1.0)*x3);
x25=(x4*x6);
x26=(x0*x7);
x27=(x4*x5);
x28=(x1*x11);
x29=(x5*x7);
x30=(x6*x7);
x31=(x1*x2);
x32=(x0*x1);
x33=(x2*x7);
x34=(x14*x3);
x35=(x17*x3);
x36=(x30+x27);
x37=((((-1.0)*x29))+(((1.0)*x25)));
x38=((((-1.0)*x30))+(((-1.0)*x27)));
x39=((((-1.0)*x17*x25))+((x26*x5)));
x40=((((-1.0)*x14*x29))+((x2*x25)));
x41=(x17*((x30+x27)));
x42=(x1*x40);
x43=(x14*(((((-1.0)*x30))+(((-1.0)*x27)))));
x44=(x3*x39);
x45=(x3*x40);
x46=(x1*x39);
x47=(x11*x43);
x48=(((x11*x37))+((x1*x10*x36)));
x49=(((x10*(((((-1.0)*x34))+x46))))+((x11*x41)));
eerot[0]=(((x9*((x31+x44))))+((x49*x8)));
eerot[1]=(((x49*x9))+((x8*(((((-1.0)*x31))+((x24*x39)))))));
eerot[2]=(((x11*((x34+(((-1.0)*x15*x39))))))+((x10*x41)));
IkReal x50=(x0*x25);
eetrans[0]=(((x3*(((((-1.0)*x16*x26))+(((0.005)*x50))))))+(((0.7035)*x26*x6))+(((-0.165)*x0))+((x0*x18))+((x11*((((x21*x3))+(((-1.0)*x23*x39))))))+(((-1.0)*x1*x19))+(((0.21)*x50))+(((-0.21)*x26*x5))+(((0.006)*x2))+(((0.7035)*x0*x27))+((x10*((((x22*x27))+((x13*x26)))))));
eerot[3]=(((x8*((x47+((x10*(((((-1.0)*x35))+x42))))))))+((x9*((x32+x45)))));
eerot[4]=(((x9*((x47+((x10*((((x0*x24))+x42))))))))+((x8*(((((-1.0)*x45))+(((-1.0)*x0*x15)))))));
eerot[5]=(((x10*x43))+((x11*(((((-1.0)*x15*x40))+x35)))));
IkReal x51=((1.0)*x27);
IkReal x52=((1.0)*x25);
eetrans[1]=(((x10*(((((-1.0)*x21*x51))+(((-1.0)*x13*x33))))))+((x3*(((((-1.0)*x19*x52))+((x16*x33))))))+(((-1.0)*x20*x30))+((x11*((((x22*x3))+(((-1.0)*x23*x40))))))+(((-1.0)*x18*x2))+(((-1.0)*x12*x52))+(((-0.005)*x32))+(((-1.0)*x20*x51))+(((0.165)*x2))+((x12*x29))+(((0.006)*x0)));
eerot[6]=(((x3*x36*x9))+((x48*x8)));
eerot[7]=(((x48*x9))+((x3*x38*x8)));
eerot[8]=(((x10*x37))+((x28*x38)));
eetrans[2]=((0.43)+((x28*(((((-0.1195)*x27))+(((-1.0)*x13*x7))))))+((x3*(((((-0.005)*x30))+(((-1.0)*x16*x4))))))+((x10*(((((-0.1195)*x29))+((x13*x4))))))+(((-0.21)*x27))+(((0.7035)*x25))+(((-0.21)*x30))+(((-0.7035)*x29))+(((0.55)*x6)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=(px+(((-0.1195)*r02)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=(py+(((-0.1195)*r12)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.43)+(((-0.1195)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x53=((1.0)*px);
IkReal x54=((1.0)*pz);
IkReal x55=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x55))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x54)));
rxp0_2=((((-1.0)*r10*x53))+((py*r00)));
rxp1_0=((((-1.0)*r21*x55))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x54)));
rxp1_2=((((-1.0)*r11*x53))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x55)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x54)));
rxp2_2=((((-1.0)*r12*x53))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x56=((0.005)*r21);
IkReal x57=((0.006)*r12);
IkReal x58=((1.0)*rxp2_2);
IkReal x59=((0.006)*r02);
IkReal x60=((0.42)*rxp2_0);
IkReal x61=((0.0693)*r22);
IkReal x62=((1.407)*npz);
IkReal x63=((0.33)*py);
IkReal x64=((0.01)*npx);
IkReal x65=((0.232155)*r12);
IkReal x66=((0.00165)*r10);
IkReal x67=((0.0021)*r01);
IkReal x68=((1.0)*pp);
IkReal x69=((0.42)*rxp2_1);
IkReal x70=((0.232155)*r02);
IkReal x71=((0.00165)*r00);
IkReal x72=((0.00252)*r22);
IkReal x73=((0.33)*px);
IkReal x74=((0.0021)*r11);
IkReal x75=((0.0033)*r11);
IkReal x76=((0.02)*npy);
IkReal x77=((0.0042)*r00);
IkReal x78=((2.0)*rxp1_2);
IkReal x79=((0.012)*r11);
IkReal x80=((0.01)*r22);
IkReal x81=((0.012)*r01);
IkReal x82=((0.024)*r00);
IkReal x83=((0.024)*r10);
IkReal x84=((4.0)*rxp0_2);
IkReal x85=((0.46431)*r11);
IkReal x86=((0.1386)*r21);
IkReal x87=((2.814)*npy);
IkReal x88=((0.0042)*r02);
IkReal x89=((0.84)*rxp1_0);
IkReal x90=((0.00504)*r21);
IkReal x91=((0.0042)*r12);
IkReal x92=((0.46431)*r01);
IkReal x93=((0.84)*rxp1_1);
IkReal x94=((1.68)*rxp0_1);
IkReal x95=((0.92862)*r00);
IkReal x96=((0.01008)*r20);
IkReal x97=((0.92862)*r10);
IkReal x98=((5.628)*npx);
IkReal x99=((0.2772)*r20);
IkReal x100=((1.68)*rxp0_0);
IkReal x101=((0.01)*r20);
IkReal x102=((0.0033)*r01);
IkReal x103=((0.0042)*r10);
IkReal x104=((-0.01)*r20);
IkReal x105=((-0.012)*r01);
IkReal x106=((-0.006)*r02);
IkReal x107=((((-1.0)*x103))+x102);
IkReal x108=(rxp2_2+x57);
IkReal x109=((-0.26372625)+x60);
IkReal x110=((0.00198)+x72);
IkReal x111=((-0.26372625)+x65);
IkReal x112=(x102+x103);
IkReal x113=(x57+x56);
IkReal x114=(x63+x64);
IkReal x115=(x61+x62);
IkReal x116=(x66+x68);
IkReal x117=(x60+x67);
IkReal x118=(x77+x76);
IkReal x119=(x79+x80);
IkReal x120=(x58+x56);
IkReal x121=(x63+x66);
IkReal x122=(x74+x71);
IkReal x123=(x99+x98);
IkReal x124=(x64+x66);
IkReal x125=(x73+x72);
IkReal x126=(x86+x87);
IkReal x127=(x88+x85);
IkReal x128=(x65+x67);
IkReal x129=(x63+x68);
IkReal x130=(x95+x94);
IkReal x131=(x64+x68);
IkReal x132=(x88+x89);
IkReal x133=(x93+x92);
IkReal x134=((0.00198)+x70+x69);
IkReal x135=(x133+x90);
IkReal x136=(x73+x70+x69);
IkReal x137=((-0.00198)+x72+x70+x69);
op[0]=((((-1.0)*x113))+(((-1.0)*x58)));
op[1]=x59;
op[2]=x104;
op[3]=0;
op[4]=(x56+(((-1.0)*x58))+(((-1.0)*x57)));
op[5]=x59;
op[6]=x59;
op[7]=((((-1.0)*x120))+x57);
op[8]=0;
op[9]=x104;
op[10]=x59;
op[11]=(x113+(((-1.0)*x58)));
op[12]=(x121+x115+x109+(((-1.0)*x131))+x67+(((-1.0)*x65)));
op[13]=((((-1.0)*x71))+(((-1.0)*x73))+x137+x74);
op[14]=((((-1.0)*x75))+x118);
op[15]=x112;
op[16]=((((-1.0)*x116))+(((-1.0)*x128))+x115+x114+x109);
op[17]=((((-1.0)*x73))+(((-1.0)*x74))+x137+x71);
op[18]=((((-1.0)*x71))+(((-1.0)*x125))+x134+x74);
op[19]=((((-1.0)*x114))+(((-1.0)*x116))+(((-1.0)*x117))+x111+x115);
op[20]=x112;
op[21]=((((-1.0)*x77))+x76+x75);
op[22]=((((-1.0)*x74))+(((-1.0)*x125))+x134+x71);
op[23]=((((-1.0)*x129))+x124+x111+x115+x67+(((-1.0)*x60)));
op[24]=((((-1.0)*x78))+(((-1.0)*x79))+x80);
op[25]=x81;
op[26]=((((-1.0)*x84))+(((-1.0)*x83)));
op[27]=x82;
op[28]=(x119+x78);
op[29]=x105;
op[30]=x81;
op[31]=((((-1.0)*x78))+x119);
op[32]=x82;
op[33]=(x83+(((-1.0)*x84)));
op[34]=x105;
op[35]=((((-1.0)*x79))+x78+x80);
op[36]=((((-1.0)*x127))+x126+x89);
op[37]=(x135+(((-1.0)*x91)));
op[38]=(x123+x100+(((-1.0)*x97)));
op[39]=(x130+x96);
op[40]=((((-1.0)*x126))+(((-1.0)*x132))+x85);
op[41]=((((-1.0)*x135))+(((-1.0)*x91)));
op[42]=(x133+(((-1.0)*x90))+(((-1.0)*x91)));
op[43]=(x126+x127+(((-1.0)*x89)));
op[44]=(x130+(((-1.0)*x96)));
op[45]=((((-1.0)*x100))+x123+x97);
op[46]=((((-1.0)*x133))+x90+(((-1.0)*x91)));
op[47]=((((-1.0)*x126))+x132+(((-1.0)*x85)));
op[48]=(x108+x56);
op[49]=x106;
op[50]=x101;
op[51]=0;
op[52]=(x108+(((-1.0)*x56)));
op[53]=x106;
op[54]=x106;
op[55]=(rxp2_2+x56+(((-1.0)*x57)));
op[56]=0;
op[57]=x101;
op[58]=x106;
op[59]=(rxp2_2+(((-1.0)*x113)));
op[60]=((((-1.0)*x115))+(((-1.0)*x117))+x121+x111+(((-1.0)*x131)));
op[61]=((-0.00198)+(((-1.0)*x70))+(((-1.0)*x122))+(((-1.0)*x125))+(((-1.0)*x69)));
op[62]=((((-1.0)*x75))+(((-1.0)*x77))+x76);
op[63]=x107;
op[64]=((((-1.0)*x115))+(((-1.0)*x116))+x111+x114+x67+(((-1.0)*x60)));
op[65]=((-0.00198)+(((-1.0)*x70))+(((-1.0)*x125))+x122+(((-1.0)*x69)));
op[66]=((((-1.0)*x122))+x110+(((-1.0)*x136)));
op[67]=((((-1.0)*x114))+(((-1.0)*x115))+(((-1.0)*x116))+x109+x67+(((-1.0)*x65)));
op[68]=x107;
op[69]=(x118+x75);
op[70]=(x122+x110+(((-1.0)*x136)));
op[71]=((((-1.0)*x115))+(((-1.0)*x129))+(((-1.0)*x128))+x124+x109);
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j4array[16], cj4array[16], sj4array[16], j5array[16], cj5array[16], sj5array[16], j0array[16], cj0array[16], sj0array[16];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ij4 += 3)
{
IkReal htj4 = zeror[ij4+0], htj5 = zeror[ij4+1], htj0 = zeror[ij4+2];
if(isnan(htj4)||isnan(htj5)||isnan(htj0)){
continue;
}
j4array[numsolutions]=((2.0)*(atan(htj4)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j0array[numsolutions]=((2.0)*(atan(htj0)));
if(isinf(htj4)){
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
}
else{
IkReal x138=htj4*htj4;
CheckValue<IkReal> x139=IKPowWithIntegerCheck(((1.0)+x138),-1);
if(!x139.valid){
continue;
}
cj4array[numsolutions]=((x139.value)*(((1.0)+(((-1.0)*x138)))));
CheckValue<IkReal> x140=IKPowWithIntegerCheck(((1.0)+(htj4*htj4)),-1);
if(!x140.valid){
continue;
}
sj4array[numsolutions]=((2.0)*htj4*(x140.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x141=htj5*htj5;
CheckValue<IkReal> x142=IKPowWithIntegerCheck(((1.0)+x141),-1);
if(!x142.valid){
continue;
}
cj5array[numsolutions]=((x142.value)*(((1.0)+(((-1.0)*x141)))));
CheckValue<IkReal> x143=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x143.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x143.value));
}
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x144=htj0*htj0;
CheckValue<IkReal> x145=IKPowWithIntegerCheck(((1.0)+x144),-1);
if(!x145.valid){
continue;
}
cj0array[numsolutions]=((x145.value)*(((1.0)+(((-1.0)*x144)))));
CheckValue<IkReal> x146=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x146.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x146.value));
}
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j4valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj4 = 16;
_nj5 = 1;
_nj0 = 1;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij0[0] = 0; _ij0[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( !j4valid[iij4] ) { continue; }
if( IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij4]-cj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij4]-sj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj0array[ij4]-cj0array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij4]-sj0array[iij4]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j4valid[iij4]=false; _ij4[1] = iij4; _ij5[1] = 0; _ij0[1] = 0;  break; 
}
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

    j5 = j5array[ij4]; cj5 = cj5array[ij4]; sj5 = sj5array[ij4];

    j0 = j0array[ij4]; cj0 = cj0array[ij4]; sj0 = sj0array[ij4];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[3];
IkReal x147=(cj0*r21);
IkReal x148=((1.0)*cj5);
IkReal x149=(cj0*r20);
IkReal x150=(((cj5*r11*sj4))+((r10*sj4*sj5))+((cj4*r12)));
j3eval[0]=x150;
j3eval[1]=IKsign(x150);
j3eval[2]=((IKabs(((((-1.0)*x148*x149))+((sj5*x147)))))+(IKabs(((((-1.0)*cj4*x147*x148))+(((-1.0)*cj4*sj5*x149))+((cj0*r22*sj4))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x151=(sj0*sj5);
IkReal x152=((1.0)*sj4);
IkReal x153=((1.0)*r20);
IkReal x154=(cj5*sj0);
IkReal x155=((1.0)*cj4);
IkReal x156=((((-1.0)*r02*x155))+(((-1.0)*cj5*r01*x152))+(((-1.0)*r00*sj5*x152)));
j3eval[0]=x156;
j3eval[1]=IKsign(x156);
j3eval[2]=((IKabs((((r22*sj0*sj4))+(((-1.0)*r21*x154*x155))+(((-1.0)*cj4*x151*x153)))))+(IKabs(((((-1.0)*x153*x154))+((r21*x151))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x157=((1.0)*sj4);
IkReal x158=((((-1.0)*r20*sj5*x157))+(((-1.0)*cj5*r21*x157))+(((-1.0)*cj4*r22)));
j3eval[0]=x158;
j3eval[1]=IKsign(x158);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x159=((1.0)*r20);
IkReal x160=(((cj5*r11*sj4))+((r10*sj4*sj5))+((cj4*r12)));
j3eval[0]=x160;
j3eval[1]=IKsign(x160);
j3eval[2]=((IKabs(((((-1.0)*cj4*sj5*x159))+((r22*sj4))+(((-1.0)*cj4*cj5*r21)))))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x159))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x161=((1.0)*cj5);
IkReal x162=((1.0)*sj5);
IkReal x163=((((-1.0)*r20*sj4*x162))+(((-1.0)*r21*sj4*x161))+(((-1.0)*cj4*r22)));
j3eval[0]=x163;
j3eval[1]=IKsign(x163);
j3eval[2]=((IKabs((((r11*sj5))+(((-1.0)*r10*x161)))))+(IKabs(((((-1.0)*cj4*r11*x161))+((r12*sj4))+(((-1.0)*cj4*r10*x162))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x164=cj4*cj4;
IkReal x165=r00*r00;
IkReal x166=cj5*cj5;
IkReal x167=r01*r01;
IkReal x168=r02*r02;
IkReal x169=(r00*sj5);
IkReal x170=((1.0)*r01);
IkReal x171=((2.0)*cj5*r01);
IkReal x172=(cj4*r02*sj4);
IkReal x173=((1.0)*x166);
IkReal x174=(x164*x165);
IkReal x175=((((-1.0)*x164*x168))+((x164*x166*x167))+((x164*x169*x171))+x174+x168+x167+(((-1.0)*x171*x172))+((x165*x166))+(((-1.0)*x169*x171))+(((-2.0)*x169*x172))+(((-1.0)*x173*x174))+(((-1.0)*x167*x173)));
j3eval[0]=x175;
j3eval[1]=((IKabs(((((-1.0)*sj5*x170))+((cj5*r00)))))+(IKabs(((((-1.0)*cj4*x169))+((r02*sj4))+(((-1.0)*cj4*cj5*x170))))));
j3eval[2]=IKsign(x175);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x176=cj4*cj4;
IkReal x177=r00*r00;
IkReal x178=cj5*cj5;
IkReal x179=r01*r01;
IkReal x180=r02*r02;
IkReal x181=(r00*sj5);
IkReal x182=((1.0)*r01);
IkReal x183=((2.0)*cj5*r01);
IkReal x184=(cj4*r02*sj4);
IkReal x185=((1.0)*x178);
IkReal x186=(x176*x177);
CheckValue<IkReal> x187 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*cj5*x182))+((r02*sj4))+(((-1.0)*cj4*x181)))),IkReal(((((-1.0)*sj5*x182))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x187.valid){
continue;
}
CheckValue<IkReal> x188=IKPowWithIntegerCheck(IKsign((((x176*x178*x179))+(((-2.0)*x181*x184))+x179+x186+x180+((x176*x181*x183))+(((-1.0)*x185*x186))+(((-1.0)*x176*x180))+(((-1.0)*x179*x185))+(((-1.0)*x183*x184))+(((-1.0)*x181*x183))+((x177*x178)))),-1);
if(!x188.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x187.value)+(((1.5707963267949)*(x188.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x189=IKsin(j3);
IkReal x190=IKcos(j3);
IkReal x191=(cj4*cj5);
IkReal x192=(cj5*r00);
IkReal x193=(r02*sj4);
IkReal x194=((1.0)*x190);
IkReal x195=(r01*x189);
IkReal x196=((1.0)*x189);
IkReal x197=(sj5*x190);
IkReal x198=(cj4*sj5*x189);
evalcond[0]=((((-1.0)*r22*sj4*x196))+(((-1.0)*cj5*r20*x194))+((r21*x189*x191))+((r20*x198))+((r21*x197)));
evalcond[1]=(((r11*x189*x191))+(((-1.0)*r12*sj4*x196))+((r10*x198))+(((-1.0)*cj5*r10*x194))+((r11*x197)));
evalcond[2]=((1.0)+(((-1.0)*x192*x194))+((r00*x198))+((r01*x197))+((x191*x195))+(((-1.0)*x193*x196)));
evalcond[3]=((((-1.0)*x192*x196))+((x190*x193))+(((-1.0)*cj4*r00*sj5*x194))+(((-1.0)*r01*x191*x194))+((sj5*x195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=1.0;
j0=0;
IkReal x199=((2.52)*py);
IkReal x200=(cj5*sj4);
IkReal x201=(cj5*r20);
IkReal x202=(cj5*r10);
IkReal x203=(r21*sj5);
IkReal x204=(cj4*r22);
IkReal x205=(cj4*r12);
IkReal x206=(r11*sj5);
IkReal x207=((0.04221)*x203);
IkReal x208=((6.468147)*x204);
IkReal x209=((0.0126)*x202);
IkReal x210=((2.52)*x205);
IkReal x211=((8.442)*x204);
IkReal x212=((0.06)*x203);
IkReal x213=(r20*sj4*sj5);
IkReal x214=(r10*sj4*sj5);
IkReal x215=((6.468147)*x213);
IkReal x216=((6.468147)*r21*x200);
IkReal x217=((2.52)*x214);
IkReal x218=((8.442)*x213);
IkReal x219=((2.52)*r11*x200);
IkReal x220=((8.442)*r21*x200);
IkReal x221=((((12.0)*pz))+(((0.06)*x201)));
IkReal x222=((((0.0126)*x206))+(((8.442)*pz))+(((0.04221)*x201)));
IkReal x223=(x199+x215+x216+x207+x209+x208);
IkReal x224=(x210+x211+x212+x217+x218+x219+x220);
j1eval[0]=((3.696)+(IKabs(((-2.2)+(((2.814)*x204))+(((0.84)*x205))+(((2.814)*r21*x200))+(((2.814)*x213))+(((0.02)*x203))+(((0.84)*r11*x200))+(((0.84)*x214))+(((-0.02)*x201))+(((-4.0)*pz)))))+(IKabs(((-1.6863)+(((-0.01407)*x201))+(((2.156049)*x204))+(((0.84)*py))+(((2.156049)*r21*x200))+(((0.01407)*x203))+(((-2.814)*pz))+(((2.156049)*x213))+(((-0.0042)*x206))+(((0.0042)*x202)))))+(IKabs(((1.1319)+x223+(((-1.0)*x222)))))+(IKabs(((-1.9635)+x223+(((-1.0)*x222)))))+(IKabs(((-2.2)+x224+(((-1.0)*x221)))))+(IKabs(((2.2)+x224+(((-1.0)*x221))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x225=(cj5*r20);
IkReal x226=(cj4*r22);
IkReal x227=(r21*sj5);
IkReal x228=((2.814)*sj4);
IkReal x229=(r20*sj5);
IkReal x230=(cj5*r21);
IkReal x231=((2.52)*sj4);
IkReal x232=(cj5*r11);
IkReal x233=((8.442)*sj4);
IkReal x234=(cj4*r12);
IkReal x235=(r10*sj5);
IkReal x236=((0.84)*sj4);
IkReal x237=((2.52)*x234);
IkReal x238=((8.442)*x226);
IkReal x239=((0.06)*x227);
IkReal x240=((2.814)*x226);
IkReal x241=((0.02)*x227);
IkReal x242=((0.84)*x234);
IkReal x243=(x231*x235);
IkReal x244=(x229*x233);
IkReal x245=(x231*x232);
IkReal x246=(x230*x233);
IkReal x247=(x228*x230);
IkReal x248=(x232*x236);
IkReal x249=(x228*x229);
IkReal x250=(x235*x236);
IkReal x251=((((12.0)*pz))+(((0.06)*x225)));
IkReal x252=((((4.0)*pz))+(((0.02)*x225)));
IkReal x253=(x238+x239+x237+x243+x246+x245+x244);
IkReal x254=(x250+x242+x241+x240+x247+x249+x248);
op[0]=((-2.2)+x254+(((-1.0)*x252)));
op[1]=0;
op[2]=((-2.2)+x253+(((-1.0)*x251)));
op[3]=0;
op[4]=((2.2)+x253+(((-1.0)*x251)));
op[5]=0;
op[6]=((2.2)+x254+(((-1.0)*x252)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x255=((0.84)*py);
IkReal x256=((2.52)*py);
IkReal x257=(cj5*r10);
IkReal x258=(r21*sj5);
IkReal x259=(cj4*r22);
IkReal x260=(r11*sj5);
IkReal x261=(cj5*r20);
IkReal x262=((0.01407)*x258);
IkReal x263=((2.156049)*x259);
IkReal x264=((0.0042)*x257);
IkReal x265=((0.04221)*x258);
IkReal x266=((6.468147)*x259);
IkReal x267=((0.0126)*x257);
IkReal x268=(r20*sj4*sj5);
IkReal x269=(cj5*r21*sj4);
IkReal x270=((2.156049)*x268);
IkReal x271=((6.468147)*x268);
IkReal x272=((6.468147)*x269);
IkReal x273=((2.156049)*x269);
IkReal x274=((((0.0126)*x260))+(((0.04221)*x261))+(((8.442)*pz)));
IkReal x275=((((0.01407)*x261))+(((2.814)*pz))+(((0.0042)*x260)));
IkReal x276=(x255+x264+x263+x262+x273+x270);
IkReal x277=(x256+x265+x267+x266+x272+x271);
j1evalpoly[0]=((1.4091)+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-1.6863)+x276+(((-1.0)*x275))))))+(((0.924)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((1.1319)+x277+(((-1.0)*x274))))))+x276+(((1.848)*(htj1*htj1*htj1)))+(((0.924)*htj1))+(((-1.0)*x275))+(((htj1*htj1*htj1*htj1)*(((-1.9635)+x277+(((-1.0)*x274)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x278=((1.0)*sj1);
IkReal x279=(sj4*sj5);
IkReal x280=(cj4*r22);
IkReal x281=(cj4*r12);
IkReal x282=((1.0)*cj1);
IkReal x283=(cj5*r21*sj4);
IkReal x284=(cj5*r11*sj4);
if( IKabs(((((-1.0)*x281*x282))+(((-1.0)*x282*x284))+(((-1.0)*r10*x279*x282))+(((-1.0)*r20*x278*x279))+(((-1.0)*x278*x280))+(((-1.0)*x278*x283)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x279))+(((-1.0)*r10*x278*x279))+((cj1*x280))+((cj1*x283))+(((-1.0)*x278*x281))+(((-1.0)*x278*x284)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x281*x282))+(((-1.0)*x282*x284))+(((-1.0)*r10*x279*x282))+(((-1.0)*r20*x278*x279))+(((-1.0)*x278*x280))+(((-1.0)*x278*x283))))+IKsqr((((cj1*r20*x279))+(((-1.0)*r10*x278*x279))+((cj1*x280))+((cj1*x283))+(((-1.0)*x278*x281))+(((-1.0)*x278*x284))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x281*x282))+(((-1.0)*x282*x284))+(((-1.0)*r10*x279*x282))+(((-1.0)*r20*x278*x279))+(((-1.0)*x278*x280))+(((-1.0)*x278*x283))), (((cj1*r20*x279))+(((-1.0)*r10*x278*x279))+((cj1*x280))+((cj1*x283))+(((-1.0)*x278*x281))+(((-1.0)*x278*x284))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x285=IKcos(j2);
IkReal x286=IKsin(j2);
IkReal x287=(sj3*sj5);
IkReal x288=((0.005)*sj5);
IkReal x289=((1.0)*cj4);
IkReal x290=((1.0)*sj1);
IkReal x291=(cj3*sj4);
IkReal x292=((0.21)*sj1);
IkReal x293=(cj3*sj5);
IkReal x294=((0.005)*cj5);
IkReal x295=(cj3*cj5);
IkReal x296=(cj1*x285);
IkReal x297=((1.0)*cj5*sj3);
IkReal x298=(cj1*x286);
IkReal x299=((1.0)*sj4*sj5);
IkReal x300=((1.0)*cj5*sj4);
IkReal x301=(sj1*x285);
IkReal x302=(x286*x290);
evalcond[0]=((((-1.0)*r21*x300))+(((-1.0)*r22*x289))+x296+(((-1.0)*r20*x299))+(((-1.0)*x302)));
evalcond[1]=((((-1.0)*x298))+(((-1.0)*x285*x290))+(((-1.0)*r12*x289))+(((-1.0)*r11*x300))+(((-1.0)*r10*x299)));
evalcond[2]=(((r21*x287))+x301+x298+(((-1.0)*r21*x289*x295))+(((-1.0)*r20*x289*x293))+(((-1.0)*r20*x297))+((r22*x291)));
evalcond[3]=((((-1.0)*r10*x289*x293))+((r12*x291))+((r11*x287))+x296+(((-1.0)*x302))+(((-1.0)*r10*x297))+(((-1.0)*r11*x289*x295)));
evalcond[4]=((((-0.21)*x298))+(((-0.7035)*sj1*x286))+(((-1.0)*x285*x292))+(((0.7035)*x296))+((r21*x288))+(((-1.0)*pz))+(((0.55)*cj1))+(((-1.0)*r20*x294)));
evalcond[5]=((0.165)+(((-0.21)*x296))+((r11*x288))+(((-0.7035)*x301))+(((-1.0)*py))+((x286*x292))+(((-0.55)*sj1))+(((-0.7035)*x298))+(((-1.0)*r10*x294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x303=((1.0)*cj5);
IkReal x304=((1.0)*sj5);
CheckValue<IkReal> x305=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj4*x303))+(((-1.0)*r20*sj4*x304))+(((-1.0)*cj4*r22)))),-1);
if(!x305.valid){
continue;
}
CheckValue<IkReal> x306 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x303)))),IkReal(((((-1.0)*cj4*r11*x303))+((r12*sj4))+(((-1.0)*cj4*r10*x304)))),IKFAST_ATAN2_MAGTHRESH);
if(!x306.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x305.value)))+(x306.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x307=IKsin(j3);
IkReal x308=IKcos(j3);
IkReal x309=(cj4*cj5);
IkReal x310=(cj5*r00);
IkReal x311=(r02*sj4);
IkReal x312=((1.0)*x308);
IkReal x313=(r01*x307);
IkReal x314=((1.0)*x307);
IkReal x315=(sj5*x308);
IkReal x316=(cj4*sj5*x307);
evalcond[0]=(((r20*x316))+(((-1.0)*cj5*r20*x312))+(((-1.0)*r22*sj4*x314))+((r21*x315))+((r21*x307*x309)));
evalcond[1]=(((r11*x315))+(((-1.0)*cj5*r10*x312))+((r11*x307*x309))+(((-1.0)*r12*sj4*x314))+((r10*x316)));
evalcond[2]=((1.0)+(((-1.0)*x310*x312))+((r01*x315))+((x309*x313))+((r00*x316))+(((-1.0)*x311*x314)));
evalcond[3]=((((-1.0)*x310*x314))+(((-1.0)*cj4*r00*sj5*x312))+((x308*x311))+((sj5*x313))+(((-1.0)*r01*x309*x312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=1.0;
j0=0;
IkReal x317=((2.52)*py);
IkReal x318=(cj5*sj4);
IkReal x319=(cj5*r20);
IkReal x320=(cj5*r10);
IkReal x321=(r21*sj5);
IkReal x322=(cj4*r22);
IkReal x323=(cj4*r12);
IkReal x324=(r11*sj5);
IkReal x325=((0.04221)*x321);
IkReal x326=((6.468147)*x322);
IkReal x327=((0.0126)*x320);
IkReal x328=((2.52)*x323);
IkReal x329=((8.442)*x322);
IkReal x330=((0.06)*x321);
IkReal x331=(r20*sj4*sj5);
IkReal x332=(r10*sj4*sj5);
IkReal x333=((6.468147)*x331);
IkReal x334=((6.468147)*r21*x318);
IkReal x335=((2.52)*x332);
IkReal x336=((8.442)*x331);
IkReal x337=((2.52)*r11*x318);
IkReal x338=((8.442)*r21*x318);
IkReal x339=((((12.0)*pz))+(((0.06)*x319)));
IkReal x340=((((0.04221)*x319))+(((0.0126)*x324))+(((8.442)*pz)));
IkReal x341=(x333+x334+x325+x326+x327+x317);
IkReal x342=(x338+x330+x337+x336+x335+x328+x329);
j1eval[0]=((3.696)+(IKabs(((2.2)+x342+(((-1.0)*x339)))))+(IKabs(((1.1319)+x341+(((-1.0)*x340)))))+(IKabs(((-1.9635)+x341+(((-1.0)*x340)))))+(IKabs(((-2.2)+x342+(((-1.0)*x339)))))+(IKabs(((-2.2)+(((2.814)*r21*x318))+(((0.84)*r11*x318))+(((0.84)*x323))+(((0.84)*x332))+(((-4.0)*pz))+(((-0.02)*x319))+(((2.814)*x331))+(((2.814)*x322))+(((0.02)*x321)))))+(IKabs(((-1.6863)+(((2.156049)*r21*x318))+(((0.01407)*x321))+(((0.84)*py))+(((2.156049)*x322))+(((2.156049)*x331))+(((-2.814)*pz))+(((-0.01407)*x319))+(((-0.0042)*x324))+(((0.0042)*x320))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x343=(cj5*r20);
IkReal x344=(cj4*r22);
IkReal x345=(r21*sj5);
IkReal x346=((2.814)*sj4);
IkReal x347=(r20*sj5);
IkReal x348=(cj5*r21);
IkReal x349=((2.52)*sj4);
IkReal x350=(cj5*r11);
IkReal x351=((8.442)*sj4);
IkReal x352=(cj4*r12);
IkReal x353=(r10*sj5);
IkReal x354=((0.84)*sj4);
IkReal x355=((2.52)*x352);
IkReal x356=((8.442)*x344);
IkReal x357=((0.06)*x345);
IkReal x358=((2.814)*x344);
IkReal x359=((0.02)*x345);
IkReal x360=((0.84)*x352);
IkReal x361=(x349*x353);
IkReal x362=(x347*x351);
IkReal x363=(x349*x350);
IkReal x364=(x348*x351);
IkReal x365=(x346*x348);
IkReal x366=(x350*x354);
IkReal x367=(x346*x347);
IkReal x368=(x353*x354);
IkReal x369=((((12.0)*pz))+(((0.06)*x343)));
IkReal x370=((((4.0)*pz))+(((0.02)*x343)));
IkReal x371=(x355+x357+x356+x361+x362+x363+x364);
IkReal x372=(x359+x358+x368+x360+x365+x366+x367);
op[0]=((-2.2)+(((-1.0)*x370))+x372);
op[1]=0;
op[2]=((-2.2)+(((-1.0)*x369))+x371);
op[3]=0;
op[4]=((2.2)+(((-1.0)*x369))+x371);
op[5]=0;
op[6]=((2.2)+(((-1.0)*x370))+x372);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x373=((0.84)*py);
IkReal x374=((2.52)*py);
IkReal x375=(cj5*r10);
IkReal x376=(r21*sj5);
IkReal x377=(cj4*r22);
IkReal x378=(r11*sj5);
IkReal x379=(cj5*r20);
IkReal x380=((0.01407)*x376);
IkReal x381=((2.156049)*x377);
IkReal x382=((0.0042)*x375);
IkReal x383=((0.04221)*x376);
IkReal x384=((6.468147)*x377);
IkReal x385=((0.0126)*x375);
IkReal x386=(r20*sj4*sj5);
IkReal x387=(cj5*r21*sj4);
IkReal x388=((2.156049)*x386);
IkReal x389=((6.468147)*x386);
IkReal x390=((6.468147)*x387);
IkReal x391=((2.156049)*x387);
IkReal x392=((((0.0126)*x378))+(((0.04221)*x379))+(((8.442)*pz)));
IkReal x393=((((0.01407)*x379))+(((0.0042)*x378))+(((2.814)*pz)));
IkReal x394=(x382+x380+x381+x388+x373+x391);
IkReal x395=(x384+x385+x383+x389+x374+x390);
j1evalpoly[0]=((1.4091)+(((-1.0)*x393))+(((0.924)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((-1.9635)+(((-1.0)*x392))+x395))))+x394+(((htj1*htj1)*(((1.1319)+(((-1.0)*x392))+x395))))+(((1.848)*(htj1*htj1*htj1)))+(((0.924)*htj1))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-1.6863)+(((-1.0)*x393))+x394)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x396=((1.0)*sj1);
IkReal x397=(sj4*sj5);
IkReal x398=(cj4*r22);
IkReal x399=(cj4*r12);
IkReal x400=((1.0)*cj1);
IkReal x401=(cj5*r21*sj4);
IkReal x402=(cj5*r11*sj4);
if( IKabs(((((-1.0)*r20*x396*x397))+(((-1.0)*r10*x397*x400))+(((-1.0)*x400*x402))+(((-1.0)*x399*x400))+(((-1.0)*x396*x398))+(((-1.0)*x396*x401)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x397))+(((-1.0)*x396*x399))+((cj1*x398))+(((-1.0)*x396*x402))+((cj1*x401))+(((-1.0)*r10*x396*x397)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x396*x397))+(((-1.0)*r10*x397*x400))+(((-1.0)*x400*x402))+(((-1.0)*x399*x400))+(((-1.0)*x396*x398))+(((-1.0)*x396*x401))))+IKsqr((((cj1*r20*x397))+(((-1.0)*x396*x399))+((cj1*x398))+(((-1.0)*x396*x402))+((cj1*x401))+(((-1.0)*r10*x396*x397))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x396*x397))+(((-1.0)*r10*x397*x400))+(((-1.0)*x400*x402))+(((-1.0)*x399*x400))+(((-1.0)*x396*x398))+(((-1.0)*x396*x401))), (((cj1*r20*x397))+(((-1.0)*x396*x399))+((cj1*x398))+(((-1.0)*x396*x402))+((cj1*x401))+(((-1.0)*r10*x396*x397))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x403=IKcos(j2);
IkReal x404=IKsin(j2);
IkReal x405=(sj3*sj5);
IkReal x406=((0.005)*sj5);
IkReal x407=((1.0)*cj4);
IkReal x408=((1.0)*sj1);
IkReal x409=(cj3*sj4);
IkReal x410=((0.21)*sj1);
IkReal x411=(cj3*sj5);
IkReal x412=((0.005)*cj5);
IkReal x413=(cj3*cj5);
IkReal x414=(cj1*x403);
IkReal x415=((1.0)*cj5*sj3);
IkReal x416=(cj1*x404);
IkReal x417=((1.0)*sj4*sj5);
IkReal x418=((1.0)*cj5*sj4);
IkReal x419=(sj1*x403);
IkReal x420=(x404*x408);
evalcond[0]=((((-1.0)*x420))+(((-1.0)*r21*x418))+(((-1.0)*r20*x417))+x414+(((-1.0)*r22*x407)));
evalcond[1]=((((-1.0)*r10*x417))+(((-1.0)*x403*x408))+(((-1.0)*r11*x418))+(((-1.0)*r12*x407))+(((-1.0)*x416)));
evalcond[2]=(((r22*x409))+(((-1.0)*r20*x415))+x416+x419+(((-1.0)*r20*x407*x411))+((r21*x405))+(((-1.0)*r21*x407*x413)));
evalcond[3]=(((r11*x405))+(((-1.0)*x420))+((r12*x409))+(((-1.0)*r10*x415))+(((-1.0)*r11*x407*x413))+x414+(((-1.0)*r10*x407*x411)));
evalcond[4]=((((-0.7035)*sj1*x404))+(((-1.0)*x403*x410))+(((-1.0)*r20*x412))+(((-1.0)*pz))+(((0.7035)*x414))+((r21*x406))+(((0.55)*cj1))+(((-0.21)*x416)));
evalcond[5]=((0.165)+((r11*x406))+(((-0.7035)*x419))+(((-0.7035)*x416))+((x404*x410))+(((-1.0)*r10*x412))+(((-1.0)*py))+(((-0.55)*sj1))+(((-0.21)*x414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x421=((1.0)*r20);
CheckValue<IkReal> x422=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj4))+((r10*sj4*sj5))+((cj4*r12)))),-1);
if(!x422.valid){
continue;
}
CheckValue<IkReal> x423 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*x421)))),IkReal((((r22*sj4))+(((-1.0)*cj4*cj5*r21))+(((-1.0)*cj4*sj5*x421)))),IKFAST_ATAN2_MAGTHRESH);
if(!x423.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x422.value)))+(x423.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x424=IKsin(j3);
IkReal x425=IKcos(j3);
IkReal x426=(cj4*cj5);
IkReal x427=(cj5*r00);
IkReal x428=(r02*sj4);
IkReal x429=((1.0)*x425);
IkReal x430=(r01*x424);
IkReal x431=((1.0)*x424);
IkReal x432=(sj5*x425);
IkReal x433=(cj4*sj5*x424);
evalcond[0]=((((-1.0)*cj5*r20*x429))+((r21*x432))+((r21*x424*x426))+(((-1.0)*r22*sj4*x431))+((r20*x433)));
evalcond[1]=((((-1.0)*cj5*r10*x429))+((r11*x424*x426))+(((-1.0)*r12*sj4*x431))+((r10*x433))+((r11*x432)));
evalcond[2]=((1.0)+((x426*x430))+(((-1.0)*x427*x429))+((r00*x433))+((r01*x432))+(((-1.0)*x428*x431)));
evalcond[3]=(((x425*x428))+(((-1.0)*x427*x431))+(((-1.0)*cj4*r00*sj5*x429))+((sj5*x430))+(((-1.0)*r01*x426*x429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=1.0;
j0=0;
IkReal x434=((2.52)*py);
IkReal x435=(cj5*sj4);
IkReal x436=(cj5*r20);
IkReal x437=(cj5*r10);
IkReal x438=(r21*sj5);
IkReal x439=(cj4*r22);
IkReal x440=(cj4*r12);
IkReal x441=(r11*sj5);
IkReal x442=((0.04221)*x438);
IkReal x443=((6.468147)*x439);
IkReal x444=((0.0126)*x437);
IkReal x445=((2.52)*x440);
IkReal x446=((8.442)*x439);
IkReal x447=((0.06)*x438);
IkReal x448=(r20*sj4*sj5);
IkReal x449=(r10*sj4*sj5);
IkReal x450=((6.468147)*x448);
IkReal x451=((6.468147)*r21*x435);
IkReal x452=((2.52)*x449);
IkReal x453=((8.442)*x448);
IkReal x454=((2.52)*r11*x435);
IkReal x455=((8.442)*r21*x435);
IkReal x456=((((12.0)*pz))+(((0.06)*x436)));
IkReal x457=((((0.0126)*x441))+(((8.442)*pz))+(((0.04221)*x436)));
IkReal x458=(x434+x444+x443+x442+x450+x451);
IkReal x459=(x445+x447+x446+x454+x455+x452+x453);
j1eval[0]=((3.696)+(IKabs(((-1.6863)+(((2.156049)*r21*x435))+(((0.0042)*x437))+(((0.01407)*x438))+(((-0.0042)*x441))+(((0.84)*py))+(((2.156049)*x448))+(((2.156049)*x439))+(((-0.01407)*x436))+(((-2.814)*pz)))))+(IKabs(((1.1319)+(((-1.0)*x457))+x458)))+(IKabs(((2.2)+(((-1.0)*x456))+x459)))+(IKabs(((-2.2)+(((0.84)*r11*x435))+(((2.814)*x439))+(((0.84)*x440))+(((0.84)*x449))+(((2.814)*x448))+(((2.814)*r21*x435))+(((0.02)*x438))+(((-0.02)*x436))+(((-4.0)*pz)))))+(IKabs(((-2.2)+(((-1.0)*x456))+x459)))+(IKabs(((-1.9635)+(((-1.0)*x457))+x458))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x460=(cj5*r20);
IkReal x461=(cj4*r22);
IkReal x462=(r21*sj5);
IkReal x463=((2.814)*sj4);
IkReal x464=(r20*sj5);
IkReal x465=(cj5*r21);
IkReal x466=((2.52)*sj4);
IkReal x467=(cj5*r11);
IkReal x468=((8.442)*sj4);
IkReal x469=(cj4*r12);
IkReal x470=(r10*sj5);
IkReal x471=((0.84)*sj4);
IkReal x472=((2.52)*x469);
IkReal x473=((8.442)*x461);
IkReal x474=((0.06)*x462);
IkReal x475=((2.814)*x461);
IkReal x476=((0.02)*x462);
IkReal x477=((0.84)*x469);
IkReal x478=(x466*x470);
IkReal x479=(x464*x468);
IkReal x480=(x466*x467);
IkReal x481=(x465*x468);
IkReal x482=(x463*x465);
IkReal x483=(x467*x471);
IkReal x484=(x463*x464);
IkReal x485=(x470*x471);
IkReal x486=((((12.0)*pz))+(((0.06)*x460)));
IkReal x487=((((4.0)*pz))+(((0.02)*x460)));
IkReal x488=(x481+x480+x474+x472+x473+x478+x479);
IkReal x489=(x483+x482+x485+x484+x475+x476+x477);
op[0]=((-2.2)+(((-1.0)*x487))+x489);
op[1]=0;
op[2]=((-2.2)+(((-1.0)*x486))+x488);
op[3]=0;
op[4]=((2.2)+(((-1.0)*x486))+x488);
op[5]=0;
op[6]=((2.2)+(((-1.0)*x487))+x489);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x490=((0.84)*py);
IkReal x491=((2.52)*py);
IkReal x492=(cj5*r10);
IkReal x493=(r21*sj5);
IkReal x494=(cj4*r22);
IkReal x495=(r11*sj5);
IkReal x496=(cj5*r20);
IkReal x497=((0.01407)*x493);
IkReal x498=((2.156049)*x494);
IkReal x499=((0.0042)*x492);
IkReal x500=((0.04221)*x493);
IkReal x501=((6.468147)*x494);
IkReal x502=((0.0126)*x492);
IkReal x503=(r20*sj4*sj5);
IkReal x504=(cj5*r21*sj4);
IkReal x505=((2.156049)*x503);
IkReal x506=((6.468147)*x503);
IkReal x507=((6.468147)*x504);
IkReal x508=((2.156049)*x504);
IkReal x509=((((0.0126)*x495))+(((8.442)*pz))+(((0.04221)*x496)));
IkReal x510=((((0.01407)*x496))+(((0.0042)*x495))+(((2.814)*pz)));
IkReal x511=(x498+x499+x490+x497+x508+x505);
IkReal x512=(x491+x500+x501+x502+x506+x507);
j1evalpoly[0]=((1.4091)+(((htj1*htj1)*(((1.1319)+(((-1.0)*x509))+x512))))+(((0.924)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((-1.9635)+(((-1.0)*x509))+x512))))+(((1.848)*(htj1*htj1*htj1)))+x511+(((0.924)*htj1))+(((-1.0)*x510))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-1.6863)+x511+(((-1.0)*x510)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x513=((1.0)*sj1);
IkReal x514=(sj4*sj5);
IkReal x515=(cj4*r22);
IkReal x516=(cj4*r12);
IkReal x517=((1.0)*cj1);
IkReal x518=(cj5*r21*sj4);
IkReal x519=(cj5*r11*sj4);
if( IKabs(((((-1.0)*r20*x513*x514))+(((-1.0)*x513*x518))+(((-1.0)*x513*x515))+(((-1.0)*x517*x519))+(((-1.0)*x516*x517))+(((-1.0)*r10*x514*x517)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x514))+(((-1.0)*x513*x516))+(((-1.0)*x513*x519))+((cj1*x518))+((cj1*x515))+(((-1.0)*r10*x513*x514)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x513*x514))+(((-1.0)*x513*x518))+(((-1.0)*x513*x515))+(((-1.0)*x517*x519))+(((-1.0)*x516*x517))+(((-1.0)*r10*x514*x517))))+IKsqr((((cj1*r20*x514))+(((-1.0)*x513*x516))+(((-1.0)*x513*x519))+((cj1*x518))+((cj1*x515))+(((-1.0)*r10*x513*x514))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x513*x514))+(((-1.0)*x513*x518))+(((-1.0)*x513*x515))+(((-1.0)*x517*x519))+(((-1.0)*x516*x517))+(((-1.0)*r10*x514*x517))), (((cj1*r20*x514))+(((-1.0)*x513*x516))+(((-1.0)*x513*x519))+((cj1*x518))+((cj1*x515))+(((-1.0)*r10*x513*x514))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x520=IKcos(j2);
IkReal x521=IKsin(j2);
IkReal x522=(sj3*sj5);
IkReal x523=((0.005)*sj5);
IkReal x524=((1.0)*cj4);
IkReal x525=((1.0)*sj1);
IkReal x526=(cj3*sj4);
IkReal x527=((0.21)*sj1);
IkReal x528=(cj3*sj5);
IkReal x529=((0.005)*cj5);
IkReal x530=(cj3*cj5);
IkReal x531=(cj1*x520);
IkReal x532=((1.0)*cj5*sj3);
IkReal x533=(cj1*x521);
IkReal x534=((1.0)*sj4*sj5);
IkReal x535=((1.0)*cj5*sj4);
IkReal x536=(sj1*x520);
IkReal x537=(x521*x525);
evalcond[0]=((((-1.0)*r21*x535))+(((-1.0)*x537))+(((-1.0)*r20*x534))+x531+(((-1.0)*r22*x524)));
evalcond[1]=((((-1.0)*x520*x525))+(((-1.0)*x533))+(((-1.0)*r10*x534))+(((-1.0)*r11*x535))+(((-1.0)*r12*x524)));
evalcond[2]=(((r21*x522))+(((-1.0)*r20*x524*x528))+(((-1.0)*r20*x532))+((r22*x526))+x533+x536+(((-1.0)*r21*x524*x530)));
evalcond[3]=((((-1.0)*r11*x524*x530))+((r11*x522))+((r12*x526))+(((-1.0)*r10*x532))+(((-1.0)*x537))+x531+(((-1.0)*r10*x524*x528)));
evalcond[4]=(((r21*x523))+(((-1.0)*x520*x527))+(((0.7035)*x531))+(((-0.7035)*sj1*x521))+(((-1.0)*r20*x529))+(((-1.0)*pz))+(((0.55)*cj1))+(((-0.21)*x533)));
evalcond[5]=((0.165)+(((-0.7035)*x536))+(((-0.7035)*x533))+((r11*x523))+(((-1.0)*r10*x529))+(((-1.0)*py))+((x521*x527))+(((-0.55)*sj1))+(((-0.21)*x531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x538=((1.0)*cj5);
IkReal x539=(((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)));
j3eval[0]=x539;
j3eval[1]=IKsign(x539);
j3eval[2]=((IKabs(((((-1.0)*r10*x538))+((r11*sj5)))))+(IKabs(((((-1.0)*cj4*r10*sj5))+((r12*sj4))+(((-1.0)*cj4*r11*x538))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x540=((1.0)*sj5);
IkReal x541=((1.0)*cj5);
IkReal x542=((((-1.0)*r11*sj4*x541))+(((-1.0)*r10*sj4*x540))+(((-1.0)*cj4*r12)));
j3eval[0]=x542;
j3eval[1]=((IKabs((((r22*sj4))+(((-1.0)*cj4*r21*x541))+(((-1.0)*cj4*r20*x540)))))+(IKabs((((r21*sj5))+(((-1.0)*r20*x541))))));
j3eval[2]=IKsign(x542);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x543=cj5*cj5;
IkReal x544=cj4*cj4;
IkReal x545=r00*r00;
IkReal x546=r01*r01;
IkReal x547=r02*r02;
IkReal x548=(r00*sj5);
IkReal x549=((1.0)*r01);
IkReal x550=((2.0)*cj5*r01);
IkReal x551=(cj4*r02*sj4);
IkReal x552=((1.0)*x546);
IkReal x553=(x543*x545);
IkReal x554=(((x548*x550))+(((-1.0)*x544*x548*x550))+(((-1.0)*x553))+(((-1.0)*x544*x545))+(((-1.0)*x547))+(((2.0)*x548*x551))+((x544*x547))+((x544*x553))+((x543*x546))+(((-1.0)*x552))+((x550*x551))+(((-1.0)*x543*x544*x552)));
j3eval[0]=x554;
j3eval[1]=((IKabs(((((-1.0)*sj5*x549))+((cj5*r00)))))+(IKabs(((((-1.0)*cj4*cj5*x549))+((r02*sj4))+(((-1.0)*cj4*x548))))));
j3eval[2]=IKsign(x554);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x555=cj5*cj5;
IkReal x556=cj4*cj4;
IkReal x557=r00*r00;
IkReal x558=r01*r01;
IkReal x559=r02*r02;
IkReal x560=(cj5*r01);
IkReal x561=((1.0)*sj5);
IkReal x562=(r00*sj5);
IkReal x563=((1.0)*x557);
IkReal x564=((2.0)*cj4*r02*sj4);
IkReal x565=(x555*x558);
CheckValue<IkReal> x566 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r00*x561))+((r02*sj4))+(((-1.0)*cj4*x560)))),IkReal(((((-1.0)*r01*x561))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x566.valid){
continue;
}
CheckValue<IkReal> x567=IKPowWithIntegerCheck(IKsign(((((-1.0)*x558))+(((-1.0)*x559))+(((2.0)*x560*x562))+(((-2.0)*x556*x560*x562))+((x562*x564))+(((-1.0)*x556*x565))+(((-1.0)*x555*x563))+((x555*x556*x557))+(((-1.0)*x556*x563))+((x560*x564))+x565+((x556*x559)))),-1);
if(!x567.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x566.value)+(((1.5707963267949)*(x567.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x568=IKsin(j3);
IkReal x569=IKcos(j3);
IkReal x570=(cj4*cj5);
IkReal x571=(cj5*r00);
IkReal x572=(r02*sj4);
IkReal x573=((1.0)*x569);
IkReal x574=(r01*x568);
IkReal x575=((1.0)*x568);
IkReal x576=(sj5*x569);
IkReal x577=(cj4*sj5*x568);
evalcond[0]=(((r21*x568*x570))+((r20*x577))+(((-1.0)*r22*sj4*x575))+((r21*x576))+(((-1.0)*cj5*r20*x573)));
evalcond[1]=((((-1.0)*r12*sj4*x575))+(((-1.0)*cj5*r10*x573))+((r10*x577))+((r11*x568*x570))+((r11*x576)));
evalcond[2]=((-1.0)+((r01*x576))+((r00*x577))+(((-1.0)*x571*x573))+(((-1.0)*x572*x575))+((x570*x574)));
evalcond[3]=((((-1.0)*x571*x575))+(((-1.0)*cj4*r00*sj5*x573))+(((-1.0)*r01*x570*x573))+((x569*x572))+((sj5*x574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x578=((12.0)*pz);
IkReal x579=((4.0)*pz);
IkReal x580=(cj5*sj4);
IkReal x581=(cj5*r20);
IkReal x582=((2.52)*sj3);
IkReal x583=(r20*sj5);
IkReal x584=((0.84)*cj3);
IkReal x585=(r22*sj4);
IkReal x586=((2.52)*cj4);
IkReal x587=(cj5*r21);
IkReal x588=((0.84)*sj3);
IkReal x589=(r21*sj5);
IkReal x590=(cj4*r22);
IkReal x591=((0.06)*x581);
IkReal x592=((8.442)*x590);
IkReal x593=((0.06)*x589);
IkReal x594=((0.02)*x581);
IkReal x595=((2.814)*x590);
IkReal x596=((0.02)*x589);
IkReal x597=(r12*x586);
IkReal x598=(r10*sj4*sj5);
IkReal x599=((8.442)*sj4*x583);
IkReal x600=((8.442)*r21*x580);
IkReal x601=(x581*x582);
IkReal x602=((2.814)*r21*x580);
IkReal x603=((2.814)*sj4*x583);
IkReal x604=((2.52)*x598);
IkReal x605=((2.52)*r11*x580);
IkReal x606=(cj3*x586*x587);
IkReal x607=(cj3*x583*x586);
IkReal x608=((2.2)+x579+x594);
IkReal x609=((2.2)+x578+x591);
IkReal x610=((-2.2)+x578+x591);
IkReal x611=(x597+x605+x604);
IkReal x612=(x593+x592+x599+x600);
IkReal x613=(x596+x595+x603+x602);
IkReal x614=(x601+x607+x606);
IkReal x615=(((x582*x589))+x612+(((2.52)*cj3*x585)));
j1eval[0]=((IKabs(((((-1.0)*x615))+x609+x614)))+(IKabs(((((-1.0)*x612))+x609+x611)))+(IKabs((((x581*x588))+((cj4*x584*x587))+(((-1.0)*x588*x589))+((cj4*x583*x584))+(((-1.0)*x584*x585))+(((-1.0)*x613))+x608)))+(IKabs(((((-1.0)*x615))+x614+x610)))+(IKabs(((((0.84)*r11*x580))+(((-1.0)*x613))+x608+(((0.84)*x598))+(((0.84)*cj4*r12)))))+(IKabs(((((-1.0)*x612))+x610+x611))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x616=((12.0)*pz);
IkReal x617=((4.0)*pz);
IkReal x618=(cj4*r22);
IkReal x619=(r21*sj5);
IkReal x620=(cj5*sj4);
IkReal x621=(cj4*r12);
IkReal x622=(cj5*r20);
IkReal x623=((2.52)*x621);
IkReal x624=((0.06)*x622);
IkReal x625=((0.02)*x622);
IkReal x626=((0.84)*x621);
IkReal x627=(r20*sj4*sj5);
IkReal x628=(r10*sj4*sj5);
IkReal x629=((2.52)*x628);
IkReal x630=((2.52)*r11*x620);
IkReal x631=((0.84)*r11*x620);
IkReal x632=((0.84)*x628);
IkReal x633=((((8.442)*x618))+(((8.442)*r21*x620))+(((0.06)*x619))+(((8.442)*x627)));
IkReal x634=((((2.814)*r21*x620))+(((0.02)*x619))+(((2.814)*x627))+(((2.814)*x618)));
IkReal x635=(x617+x625+x626+x632+x631);
IkReal x636=(x616+x624+x623+x629+x630);
op[0]=((2.2)+(((-1.0)*x634))+x635);
op[1]=0;
op[2]=((2.2)+(((-1.0)*x633))+x636);
op[3]=0;
op[4]=((-2.2)+(((-1.0)*x633))+x636);
op[5]=0;
op[6]=((-2.2)+(((-1.0)*x634))+x635);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x637=((4.0)*pz);
IkReal x638=((12.0)*pz);
IkReal x639=(r20*sj5);
IkReal x640=((0.84)*cj3);
IkReal x641=((8.442)*sj4);
IkReal x642=(cj5*r20);
IkReal x643=(r22*sj4);
IkReal x644=((2.52)*sj3);
IkReal x645=(cj5*r21);
IkReal x646=((2.814)*sj4);
IkReal x647=((0.84)*sj3);
IkReal x648=(r21*sj5);
IkReal x649=(cj4*r22);
IkReal x650=((0.02)*x642);
IkReal x651=((0.06)*x642);
IkReal x652=((2.52)*cj3*cj4);
IkReal x653=(x642*x647);
IkReal x654=(x642*x644);
IkReal x655=(cj4*x639*x640);
IkReal x656=(cj4*x640*x645);
IkReal x657=(x645*x652);
IkReal x658=(x639*x652);
IkReal x659=(x650+x653+x655+x656+x637);
IkReal x660=(x651+x654+x657+x658+x638);
IkReal x661=(((x644*x648))+(((0.06)*x648))+((x639*x641))+(((8.442)*x649))+((x641*x645))+(((2.52)*cj3*x643)));
IkReal x662=((((2.814)*x649))+(((0.02)*x648))+((x639*x646))+((x640*x643))+((x645*x646))+((x647*x648)));
j1evalpoly[0]=((-2.2)+(((htj1*htj1*htj1*htj1)*(((2.2)+(((-1.0)*x661))+x660))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((2.2)+(((-1.0)*x662))+x659))))+(((-1.0)*x662))+x659+(((htj1*htj1)*(((-2.2)+(((-1.0)*x661))+x660)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x663=((1.0)*sj1);
IkReal x664=(sj4*sj5);
IkReal x665=(cj4*r12);
IkReal x666=(cj4*r22);
IkReal x667=(cj5*sj4);
IkReal x668=(cj1*x667);
if( IKabs(((((-1.0)*x663*x666))+((r11*x668))+(((-1.0)*r21*x663*x667))+(((-1.0)*r20*x663*x664))+((cj1*x665))+((cj1*r10*x664)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj1*x664))+((r11*sj1*x667))+((sj1*x665))+((r21*x668))+((cj1*r20*x664))+((cj1*x666)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x663*x666))+((r11*x668))+(((-1.0)*r21*x663*x667))+(((-1.0)*r20*x663*x664))+((cj1*x665))+((cj1*r10*x664))))+IKsqr((((r10*sj1*x664))+((r11*sj1*x667))+((sj1*x665))+((r21*x668))+((cj1*r20*x664))+((cj1*x666))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x663*x666))+((r11*x668))+(((-1.0)*r21*x663*x667))+(((-1.0)*r20*x663*x664))+((cj1*x665))+((cj1*r10*x664))), (((r10*sj1*x664))+((r11*sj1*x667))+((sj1*x665))+((r21*x668))+((cj1*r20*x664))+((cj1*x666))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x669=IKcos(j2);
IkReal x670=IKsin(j2);
IkReal x671=(sj3*sj5);
IkReal x672=((0.005)*sj5);
IkReal x673=((1.0)*cj4);
IkReal x674=(cj3*sj4);
IkReal x675=(cj3*sj5);
IkReal x676=((0.005)*cj5);
IkReal x677=(cj3*cj5);
IkReal x678=(sj1*x669);
IkReal x679=(cj1*x670);
IkReal x680=(cj1*x669);
IkReal x681=((1.0)*cj5*sj3);
IkReal x682=((1.0)*sj4*sj5);
IkReal x683=(sj1*x670);
IkReal x684=((1.0)*cj5*sj4);
IkReal x685=(x678+x679);
evalcond[0]=((((-1.0)*r10*x682))+x685+(((-1.0)*r12*x673))+(((-1.0)*r11*x684)));
evalcond[1]=((((-1.0)*r22*x673))+(((-1.0)*r21*x684))+x680+(((-1.0)*r20*x682))+(((-1.0)*x683)));
evalcond[2]=(((r21*x671))+(((-1.0)*r21*x673*x677))+((r22*x674))+(((-1.0)*r20*x673*x675))+x685+(((-1.0)*r20*x681)));
evalcond[3]=((((-1.0)*r10*x681))+((r12*x674))+((r11*x671))+(((-1.0)*r10*x673*x675))+(((-1.0)*r11*x673*x677))+x683+(((-1.0)*x680)));
evalcond[4]=(((r21*x672))+(((-1.0)*r20*x676))+(((-1.0)*pz))+(((-0.21)*x679))+(((-0.21)*x678))+(((0.55)*cj1))+(((0.7035)*x680))+(((-0.7035)*x683)));
evalcond[5]=((-0.165)+(((0.7035)*x679))+(((0.7035)*x678))+((r11*x672))+(((-1.0)*py))+(((0.21)*x680))+(((-0.21)*x683))+(((0.55)*sj1))+(((-1.0)*r10*x676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x686=((1.0)*sj5);
IkReal x687=((1.0)*cj5);
CheckValue<IkReal> x688 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x687)))),IkReal(((((-1.0)*cj4*r21*x687))+((r22*sj4))+(((-1.0)*cj4*r20*x686)))),IKFAST_ATAN2_MAGTHRESH);
if(!x688.valid){
continue;
}
CheckValue<IkReal> x689=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj4*x687))+(((-1.0)*r10*sj4*x686))+(((-1.0)*cj4*r12)))),-1);
if(!x689.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x688.value)+(((1.5707963267949)*(x689.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x690=IKsin(j3);
IkReal x691=IKcos(j3);
IkReal x692=(cj4*cj5);
IkReal x693=(cj5*r00);
IkReal x694=(r02*sj4);
IkReal x695=((1.0)*x691);
IkReal x696=(r01*x690);
IkReal x697=((1.0)*x690);
IkReal x698=(sj5*x691);
IkReal x699=(cj4*sj5*x690);
evalcond[0]=(((r20*x699))+((r21*x690*x692))+(((-1.0)*cj5*r20*x695))+((r21*x698))+(((-1.0)*r22*sj4*x697)));
evalcond[1]=(((r11*x690*x692))+(((-1.0)*cj5*r10*x695))+(((-1.0)*r12*sj4*x697))+((r10*x699))+((r11*x698)));
evalcond[2]=((-1.0)+(((-1.0)*x693*x695))+((x692*x696))+(((-1.0)*x694*x697))+((r00*x699))+((r01*x698)));
evalcond[3]=((((-1.0)*r01*x692*x695))+(((-1.0)*x693*x697))+((x691*x694))+((sj5*x696))+(((-1.0)*cj4*r00*sj5*x695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x700=((12.0)*pz);
IkReal x701=((4.0)*pz);
IkReal x702=(cj5*sj4);
IkReal x703=(cj5*r20);
IkReal x704=((2.52)*sj3);
IkReal x705=(r20*sj5);
IkReal x706=((0.84)*cj3);
IkReal x707=(r22*sj4);
IkReal x708=((2.52)*cj4);
IkReal x709=(cj5*r21);
IkReal x710=((0.84)*sj3);
IkReal x711=(r21*sj5);
IkReal x712=(cj4*r22);
IkReal x713=((0.06)*x703);
IkReal x714=((8.442)*x712);
IkReal x715=((0.06)*x711);
IkReal x716=((0.02)*x703);
IkReal x717=((2.814)*x712);
IkReal x718=((0.02)*x711);
IkReal x719=(r12*x708);
IkReal x720=(r10*sj4*sj5);
IkReal x721=((8.442)*sj4*x705);
IkReal x722=((8.442)*r21*x702);
IkReal x723=(x703*x704);
IkReal x724=((2.814)*r21*x702);
IkReal x725=((2.814)*sj4*x705);
IkReal x726=((2.52)*x720);
IkReal x727=((2.52)*r11*x702);
IkReal x728=(cj3*x708*x709);
IkReal x729=(cj3*x705*x708);
IkReal x730=((2.2)+x716+x701);
IkReal x731=((2.2)+x713+x700);
IkReal x732=((-2.2)+x713+x700);
IkReal x733=(x719+x726+x727);
IkReal x734=(x715+x714+x721+x722);
IkReal x735=(x718+x717+x724+x725);
IkReal x736=(x723+x728+x729);
IkReal x737=((((2.52)*cj3*x707))+((x704*x711))+x734);
j1eval[0]=((IKabs(((((-1.0)*x737))+x736+x732)))+(IKabs(((((-1.0)*x734))+x733+x732)))+(IKabs(((((-1.0)*x706*x707))+((cj4*x706*x709))+(((-1.0)*x710*x711))+((x703*x710))+(((-1.0)*x735))+x730+((cj4*x705*x706)))))+(IKabs(((((-1.0)*x737))+x736+x731)))+(IKabs(((((-1.0)*x734))+x733+x731)))+(IKabs(((((0.84)*x720))+(((-1.0)*x735))+(((0.84)*r11*x702))+x730+(((0.84)*cj4*r12))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x738=((12.0)*pz);
IkReal x739=((4.0)*pz);
IkReal x740=(cj4*r22);
IkReal x741=(r21*sj5);
IkReal x742=(cj5*sj4);
IkReal x743=(cj4*r12);
IkReal x744=(cj5*r20);
IkReal x745=((2.52)*x743);
IkReal x746=((0.06)*x744);
IkReal x747=((0.02)*x744);
IkReal x748=((0.84)*x743);
IkReal x749=(r20*sj4*sj5);
IkReal x750=(r10*sj4*sj5);
IkReal x751=((2.52)*x750);
IkReal x752=((2.52)*r11*x742);
IkReal x753=((0.84)*r11*x742);
IkReal x754=((0.84)*x750);
IkReal x755=((((8.442)*x749))+(((8.442)*x740))+(((8.442)*r21*x742))+(((0.06)*x741)));
IkReal x756=((((2.814)*x740))+(((2.814)*x749))+(((2.814)*r21*x742))+(((0.02)*x741)));
IkReal x757=(x739+x754+x753+x747+x748);
IkReal x758=(x738+x751+x752+x746+x745);
op[0]=((2.2)+x757+(((-1.0)*x756)));
op[1]=0;
op[2]=((2.2)+x758+(((-1.0)*x755)));
op[3]=0;
op[4]=((-2.2)+x758+(((-1.0)*x755)));
op[5]=0;
op[6]=((-2.2)+x757+(((-1.0)*x756)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x759=((4.0)*pz);
IkReal x760=((12.0)*pz);
IkReal x761=(r20*sj5);
IkReal x762=((0.84)*cj3);
IkReal x763=((8.442)*sj4);
IkReal x764=(cj5*r20);
IkReal x765=(r22*sj4);
IkReal x766=((2.52)*sj3);
IkReal x767=(cj5*r21);
IkReal x768=((2.814)*sj4);
IkReal x769=((0.84)*sj3);
IkReal x770=(r21*sj5);
IkReal x771=(cj4*r22);
IkReal x772=((0.02)*x764);
IkReal x773=((0.06)*x764);
IkReal x774=((2.52)*cj3*cj4);
IkReal x775=(x764*x769);
IkReal x776=(x764*x766);
IkReal x777=(cj4*x761*x762);
IkReal x778=(cj4*x762*x767);
IkReal x779=(x767*x774);
IkReal x780=(x761*x774);
IkReal x781=(x759+x772+x777+x775+x778);
IkReal x782=(x773+x776+x779+x760+x780);
IkReal x783=((((2.52)*cj3*x765))+((x761*x763))+((x763*x767))+((x766*x770))+(((8.442)*x771))+(((0.06)*x770)));
IkReal x784=((((2.814)*x771))+((x761*x768))+((x769*x770))+((x762*x765))+((x767*x768))+(((0.02)*x770)));
j1evalpoly[0]=((-2.2)+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((2.2)+(((-1.0)*x784))+x781))))+(((-1.0)*x784))+(((htj1*htj1*htj1*htj1)*(((2.2)+(((-1.0)*x783))+x782))))+(((htj1*htj1)*(((-2.2)+(((-1.0)*x783))+x782))))+x781);
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x785=((1.0)*sj1);
IkReal x786=(sj4*sj5);
IkReal x787=(cj4*r12);
IkReal x788=(cj4*r22);
IkReal x789=(cj5*sj4);
IkReal x790=(cj1*x789);
if( IKabs((((cj1*x787))+(((-1.0)*r21*x785*x789))+((cj1*r10*x786))+((r11*x790))+(((-1.0)*r20*x785*x786))+(((-1.0)*x785*x788)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj1*x789))+((cj1*r20*x786))+((r10*sj1*x786))+((cj1*x788))+((sj1*x787))+((r21*x790)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x787))+(((-1.0)*r21*x785*x789))+((cj1*r10*x786))+((r11*x790))+(((-1.0)*r20*x785*x786))+(((-1.0)*x785*x788))))+IKsqr((((r11*sj1*x789))+((cj1*r20*x786))+((r10*sj1*x786))+((cj1*x788))+((sj1*x787))+((r21*x790))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x787))+(((-1.0)*r21*x785*x789))+((cj1*r10*x786))+((r11*x790))+(((-1.0)*r20*x785*x786))+(((-1.0)*x785*x788))), (((r11*sj1*x789))+((cj1*r20*x786))+((r10*sj1*x786))+((cj1*x788))+((sj1*x787))+((r21*x790))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x791=IKcos(j2);
IkReal x792=IKsin(j2);
IkReal x793=(sj3*sj5);
IkReal x794=((0.005)*sj5);
IkReal x795=((1.0)*cj4);
IkReal x796=(cj3*sj4);
IkReal x797=(cj3*sj5);
IkReal x798=((0.005)*cj5);
IkReal x799=(cj3*cj5);
IkReal x800=(sj1*x791);
IkReal x801=(cj1*x792);
IkReal x802=(cj1*x791);
IkReal x803=((1.0)*cj5*sj3);
IkReal x804=((1.0)*sj4*sj5);
IkReal x805=(sj1*x792);
IkReal x806=((1.0)*cj5*sj4);
IkReal x807=(x801+x800);
evalcond[0]=((((-1.0)*r11*x806))+(((-1.0)*r12*x795))+x807+(((-1.0)*r10*x804)));
evalcond[1]=((((-1.0)*x805))+(((-1.0)*r21*x806))+(((-1.0)*r20*x804))+(((-1.0)*r22*x795))+x802);
evalcond[2]=(((r21*x793))+(((-1.0)*r20*x803))+((r22*x796))+x807+(((-1.0)*r21*x795*x799))+(((-1.0)*r20*x795*x797)));
evalcond[3]=((((-1.0)*x802))+((r11*x793))+(((-1.0)*r11*x795*x799))+(((-1.0)*r10*x795*x797))+x805+((r12*x796))+(((-1.0)*r10*x803)));
evalcond[4]=((((-0.7035)*x805))+(((-0.21)*x800))+(((-0.21)*x801))+(((-1.0)*r20*x798))+((r21*x794))+(((-1.0)*pz))+(((0.7035)*x802))+(((0.55)*cj1)));
evalcond[5]=((-0.165)+(((0.21)*x802))+(((-0.21)*x805))+(((-1.0)*py))+(((0.7035)*x800))+(((0.7035)*x801))+(((-1.0)*r10*x798))+((r11*x794))+(((0.55)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x808=((1.0)*cj5);
CheckValue<IkReal> x809=IKPowWithIntegerCheck(IKsign((((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)))),-1);
if(!x809.valid){
continue;
}
CheckValue<IkReal> x810 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x808)))),IkReal(((((-1.0)*cj4*r11*x808))+(((-1.0)*cj4*r10*sj5))+((r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x810.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x809.value)))+(x810.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x811=IKsin(j3);
IkReal x812=IKcos(j3);
IkReal x813=(cj4*cj5);
IkReal x814=(cj5*r00);
IkReal x815=(r02*sj4);
IkReal x816=((1.0)*x812);
IkReal x817=(r01*x811);
IkReal x818=((1.0)*x811);
IkReal x819=(sj5*x812);
IkReal x820=(cj4*sj5*x811);
evalcond[0]=((((-1.0)*r22*sj4*x818))+((r20*x820))+((r21*x811*x813))+(((-1.0)*cj5*r20*x816))+((r21*x819)));
evalcond[1]=(((r11*x819))+((r11*x811*x813))+(((-1.0)*r12*sj4*x818))+(((-1.0)*cj5*r10*x816))+((r10*x820)));
evalcond[2]=((-1.0)+((r01*x819))+((x813*x817))+(((-1.0)*x815*x818))+((r00*x820))+(((-1.0)*x814*x816)));
evalcond[3]=((((-1.0)*cj4*r00*sj5*x816))+((x812*x815))+((sj5*x817))+(((-1.0)*x814*x818))+(((-1.0)*r01*x813*x816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x821=((12.0)*pz);
IkReal x822=((4.0)*pz);
IkReal x823=(cj5*sj4);
IkReal x824=(cj5*r20);
IkReal x825=((2.52)*sj3);
IkReal x826=(r20*sj5);
IkReal x827=((0.84)*cj3);
IkReal x828=(r22*sj4);
IkReal x829=((2.52)*cj4);
IkReal x830=(cj5*r21);
IkReal x831=((0.84)*sj3);
IkReal x832=(r21*sj5);
IkReal x833=(cj4*r22);
IkReal x834=((0.06)*x824);
IkReal x835=((8.442)*x833);
IkReal x836=((0.06)*x832);
IkReal x837=((0.02)*x824);
IkReal x838=((2.814)*x833);
IkReal x839=((0.02)*x832);
IkReal x840=(r12*x829);
IkReal x841=(r10*sj4*sj5);
IkReal x842=((8.442)*sj4*x826);
IkReal x843=((8.442)*r21*x823);
IkReal x844=(x824*x825);
IkReal x845=((2.814)*r21*x823);
IkReal x846=((2.814)*sj4*x826);
IkReal x847=((2.52)*x841);
IkReal x848=((2.52)*r11*x823);
IkReal x849=(cj3*x829*x830);
IkReal x850=(cj3*x826*x829);
IkReal x851=((2.2)+x822+x837);
IkReal x852=((2.2)+x821+x834);
IkReal x853=((-2.2)+x821+x834);
IkReal x854=(x840+x847+x848);
IkReal x855=(x835+x836+x843+x842);
IkReal x856=(x838+x839+x845+x846);
IkReal x857=(x850+x844+x849);
IkReal x858=((((2.52)*cj3*x828))+x855+((x825*x832)));
j1eval[0]=((IKabs(((((-1.0)*x856))+(((0.84)*x841))+x851+(((0.84)*r11*x823))+(((0.84)*cj4*r12)))))+(IKabs(((((-1.0)*x855))+x853+x854)))+(IKabs(((((-1.0)*x858))+x853+x857)))+(IKabs(((((-1.0)*x858))+x852+x857)))+(IKabs((((x824*x831))+(((-1.0)*x856))+((cj4*x826*x827))+((cj4*x827*x830))+(((-1.0)*x827*x828))+x851+(((-1.0)*x831*x832)))))+(IKabs(((((-1.0)*x855))+x852+x854))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x859=((12.0)*pz);
IkReal x860=((4.0)*pz);
IkReal x861=(cj4*r22);
IkReal x862=(r21*sj5);
IkReal x863=(cj5*sj4);
IkReal x864=(cj4*r12);
IkReal x865=(cj5*r20);
IkReal x866=((2.52)*x864);
IkReal x867=((0.06)*x865);
IkReal x868=((0.02)*x865);
IkReal x869=((0.84)*x864);
IkReal x870=(r20*sj4*sj5);
IkReal x871=(r10*sj4*sj5);
IkReal x872=((2.52)*x871);
IkReal x873=((2.52)*r11*x863);
IkReal x874=((0.84)*r11*x863);
IkReal x875=((0.84)*x871);
IkReal x876=((((8.442)*r21*x863))+(((8.442)*x870))+(((8.442)*x861))+(((0.06)*x862)));
IkReal x877=((((2.814)*r21*x863))+(((2.814)*x861))+(((0.02)*x862))+(((2.814)*x870)));
IkReal x878=(x869+x868+x860+x874+x875);
IkReal x879=(x859+x867+x866+x872+x873);
op[0]=((2.2)+x878+(((-1.0)*x877)));
op[1]=0;
op[2]=((2.2)+x879+(((-1.0)*x876)));
op[3]=0;
op[4]=((-2.2)+x879+(((-1.0)*x876)));
op[5]=0;
op[6]=((-2.2)+x878+(((-1.0)*x877)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x880=((4.0)*pz);
IkReal x881=((12.0)*pz);
IkReal x882=(r20*sj5);
IkReal x883=((0.84)*cj3);
IkReal x884=((8.442)*sj4);
IkReal x885=(cj5*r20);
IkReal x886=(r22*sj4);
IkReal x887=((2.52)*sj3);
IkReal x888=(cj5*r21);
IkReal x889=((2.814)*sj4);
IkReal x890=((0.84)*sj3);
IkReal x891=(r21*sj5);
IkReal x892=(cj4*r22);
IkReal x893=((0.02)*x885);
IkReal x894=((0.06)*x885);
IkReal x895=((2.52)*cj3*cj4);
IkReal x896=(x885*x890);
IkReal x897=(x885*x887);
IkReal x898=(cj4*x882*x883);
IkReal x899=(cj4*x883*x888);
IkReal x900=(x888*x895);
IkReal x901=(x882*x895);
IkReal x902=(x880+x896+x893+x898+x899);
IkReal x903=(x881+x897+x894+x900+x901);
IkReal x904=((((8.442)*x892))+((x882*x884))+(((2.52)*cj3*x886))+(((0.06)*x891))+((x884*x888))+((x887*x891)));
IkReal x905=((((2.814)*x892))+((x883*x886))+((x882*x889))+(((0.02)*x891))+((x890*x891))+((x888*x889)));
j1evalpoly[0]=((-2.2)+(((-1.0)*x905))+(((htj1*htj1)*(((-2.2)+(((-1.0)*x904))+x903))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((2.2)+(((-1.0)*x905))+x902))))+(((htj1*htj1*htj1*htj1)*(((2.2)+(((-1.0)*x904))+x903))))+x902);
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x906=((1.0)*sj1);
IkReal x907=(sj4*sj5);
IkReal x908=(cj4*r12);
IkReal x909=(cj4*r22);
IkReal x910=(cj5*sj4);
IkReal x911=(cj1*x910);
if( IKabs((((cj1*x908))+(((-1.0)*r20*x906*x907))+(((-1.0)*r21*x906*x910))+((r11*x911))+((cj1*r10*x907))+(((-1.0)*x906*x909)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x909))+((r11*sj1*x910))+((r10*sj1*x907))+((cj1*r20*x907))+((r21*x911))+((sj1*x908)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x908))+(((-1.0)*r20*x906*x907))+(((-1.0)*r21*x906*x910))+((r11*x911))+((cj1*r10*x907))+(((-1.0)*x906*x909))))+IKsqr((((cj1*x909))+((r11*sj1*x910))+((r10*sj1*x907))+((cj1*r20*x907))+((r21*x911))+((sj1*x908))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x908))+(((-1.0)*r20*x906*x907))+(((-1.0)*r21*x906*x910))+((r11*x911))+((cj1*r10*x907))+(((-1.0)*x906*x909))), (((cj1*x909))+((r11*sj1*x910))+((r10*sj1*x907))+((cj1*r20*x907))+((r21*x911))+((sj1*x908))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x912=IKcos(j2);
IkReal x913=IKsin(j2);
IkReal x914=(sj3*sj5);
IkReal x915=((0.005)*sj5);
IkReal x916=((1.0)*cj4);
IkReal x917=(cj3*sj4);
IkReal x918=(cj3*sj5);
IkReal x919=((0.005)*cj5);
IkReal x920=(cj3*cj5);
IkReal x921=(sj1*x912);
IkReal x922=(cj1*x913);
IkReal x923=(cj1*x912);
IkReal x924=((1.0)*cj5*sj3);
IkReal x925=((1.0)*sj4*sj5);
IkReal x926=(sj1*x913);
IkReal x927=((1.0)*cj5*sj4);
IkReal x928=(x922+x921);
evalcond[0]=((((-1.0)*r11*x927))+(((-1.0)*r10*x925))+(((-1.0)*r12*x916))+x928);
evalcond[1]=((((-1.0)*r22*x916))+(((-1.0)*r21*x927))+(((-1.0)*r20*x925))+(((-1.0)*x926))+x923);
evalcond[2]=((((-1.0)*r20*x916*x918))+(((-1.0)*r20*x924))+((r22*x917))+((r21*x914))+x928+(((-1.0)*r21*x916*x920)));
evalcond[3]=((((-1.0)*r10*x924))+((r12*x917))+(((-1.0)*r11*x916*x920))+(((-1.0)*r10*x916*x918))+((r11*x914))+(((-1.0)*x923))+x926);
evalcond[4]=((((-1.0)*r20*x919))+(((-0.7035)*x926))+(((-1.0)*pz))+(((0.7035)*x923))+(((0.55)*cj1))+((r21*x915))+(((-0.21)*x921))+(((-0.21)*x922)));
evalcond[5]=((-0.165)+((r11*x915))+(((-1.0)*py))+(((0.7035)*x922))+(((0.7035)*x921))+(((-1.0)*r10*x919))+(((0.55)*sj1))+(((-0.21)*x926))+(((0.21)*x923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x929=((1.0)*r00);
IkReal x930=(((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)));
j3eval[0]=x930;
j3eval[1]=IKsign(x930);
j3eval[2]=((IKabs(((((-1.0)*cj4*sj5*x929))+(((-1.0)*cj4*cj5*r01))+((r02*sj4)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*x929))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x931=((1.0)*sj5);
IkReal x932=((1.0)*cj5);
IkReal x933=((((-1.0)*cj4*r02))+(((-1.0)*r01*sj4*x932))+(((-1.0)*r00*sj4*x931)));
j3eval[0]=x933;
j3eval[1]=IKsign(x933);
j3eval[2]=((IKabs((((r22*sj4))+(((-1.0)*cj4*r20*x931))+(((-1.0)*cj4*r21*x932)))))+(IKabs(((((-1.0)*r20*x932))+((r21*sj5))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x934=cj4*cj4;
IkReal x935=r11*r11;
IkReal x936=cj5*cj5;
IkReal x937=r10*r10;
IkReal x938=r12*r12;
IkReal x939=(cj5*r11);
IkReal x940=((1.0)*cj4);
IkReal x941=((1.0)*x934);
IkReal x942=((2.0)*r10*sj5);
IkReal x943=(cj4*r12*sj4);
IkReal x944=(x936*x937);
IkReal x945=(x935*x936);
IkReal x946=((((-2.0)*x939*x943))+((x934*x939*x942))+(((-1.0)*x939*x942))+(((-1.0)*x938*x941))+(((-1.0)*x942*x943))+(((-1.0)*x941*x944))+(((-1.0)*x945))+((x934*x945))+((x934*x937))+x938+x935+x944);
j3eval[0]=x946;
j3eval[1]=((IKabs(((((-1.0)*x939*x940))+(((-1.0)*r10*sj5*x940))+((r12*sj4)))))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j3eval[2]=IKsign(x946);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x947=cj4*cj4;
IkReal x948=r11*r11;
IkReal x949=cj5*cj5;
IkReal x950=r10*r10;
IkReal x951=r12*r12;
IkReal x952=(cj5*r11);
IkReal x953=((1.0)*sj5);
IkReal x954=((2.0)*r10*sj5);
IkReal x955=(cj4*r12*sj4);
IkReal x956=((1.0)*x947);
IkReal x957=(x949*x950);
IkReal x958=(x948*x949);
CheckValue<IkReal> x959 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r10*x953))+(((-1.0)*cj4*x952))+((r12*sj4)))),IkReal((((cj5*r10))+(((-1.0)*r11*x953)))),IKFAST_ATAN2_MAGTHRESH);
if(!x959.valid){
continue;
}
CheckValue<IkReal> x960=IKPowWithIntegerCheck(IKsign((((x947*x952*x954))+(((-2.0)*x952*x955))+(((-1.0)*x958))+(((-1.0)*x956*x957))+((x947*x958))+((x947*x950))+(((-1.0)*x951*x956))+(((-1.0)*x954*x955))+(((-1.0)*x952*x954))+x957+x951+x948)),-1);
if(!x960.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x959.value)+(((1.5707963267949)*(x960.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x961=IKsin(j3);
IkReal x962=IKcos(j3);
IkReal x963=(cj4*cj5);
IkReal x964=(r12*sj4);
IkReal x965=(cj5*r10);
IkReal x966=((1.0)*x962);
IkReal x967=(r11*x961);
IkReal x968=((1.0)*x961);
IkReal x969=(sj5*x962);
IkReal x970=(cj4*sj5*x961);
evalcond[0]=((((-1.0)*r22*sj4*x968))+((r21*x961*x963))+((r21*x969))+((r20*x970))+(((-1.0)*cj5*r20*x966)));
evalcond[1]=((((-1.0)*cj5*r00*x966))+((r00*x970))+((r01*x969))+((r01*x961*x963))+(((-1.0)*r02*sj4*x968)));
evalcond[2]=((1.0)+(((-1.0)*x965*x966))+(((-1.0)*x964*x968))+((r11*x969))+((x963*x967))+((r10*x970)));
evalcond[3]=((((-1.0)*r11*x963*x966))+(((-1.0)*x965*x968))+((x962*x964))+(((-1.0)*cj4*r10*sj5*x966))+((sj5*x967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x971=((12.0)*pz);
IkReal x972=((2.52)*px);
IkReal x973=((8.442)*pz);
IkReal x974=(cj5*sj4);
IkReal x975=(cj4*r02);
IkReal x976=(cj5*r20);
IkReal x977=(r01*sj5);
IkReal x978=(r21*sj5);
IkReal x979=(cj4*r22);
IkReal x980=(cj5*r00);
IkReal x981=((2.52)*x975);
IkReal x982=((0.06)*x976);
IkReal x983=((0.0126)*x980);
IkReal x984=((0.04221)*x976);
IkReal x985=(r20*sj4*sj5);
IkReal x986=(r00*sj4*sj5);
IkReal x987=((2.52)*r01*x974);
IkReal x988=((2.52)*x986);
IkReal x989=(x984+x983+x973+x972);
IkReal x990=((((0.06)*x978))+(((8.442)*x979))+(((8.442)*x985))+(((8.442)*r21*x974)));
IkReal x991=(x988+x987+x981+x982+x971);
IkReal x992=((((0.0126)*x977))+(((6.468147)*r21*x974))+(((0.04221)*x978))+(((6.468147)*x985))+(((6.468147)*x979)));
j1eval[0]=((3.696)+(IKabs(((2.2)+(((-2.814)*x985))+(((-2.814)*x979))+(((4.0)*pz))+(((0.02)*x976))+(((-2.814)*r21*x974))+(((0.84)*x986))+(((0.84)*x975))+(((-0.02)*x978))+(((0.84)*r01*x974)))))+(IKabs(((-1.1319)+(((-1.0)*x992))+x989)))+(IKabs(((-2.2)+(((-1.0)*x990))+x991)))+(IKabs(((2.2)+(((-1.0)*x990))+x991)))+(IKabs(((1.9635)+(((-1.0)*x992))+x989)))+(IKabs(((1.6863)+(((-2.156049)*r21*x974))+(((-0.01407)*x978))+(((0.0042)*x980))+(((0.01407)*x976))+(((0.84)*px))+(((-2.156049)*x979))+(((-2.156049)*x985))+(((2.814)*pz))+(((-0.0042)*x977))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x993=((12.0)*pz);
IkReal x994=((4.0)*pz);
IkReal x995=(cj5*r20);
IkReal x996=(cj4*r22);
IkReal x997=(r21*sj5);
IkReal x998=(cj5*sj4);
IkReal x999=(cj4*r02);
IkReal x1000=((2.52)*x999);
IkReal x1001=((0.06)*x995);
IkReal x1002=((0.02)*x995);
IkReal x1003=((0.84)*x999);
IkReal x1004=(r20*sj4*sj5);
IkReal x1005=(r00*sj4*sj5);
IkReal x1006=((2.52)*r01*x998);
IkReal x1007=((2.52)*x1005);
IkReal x1008=((0.84)*x1005);
IkReal x1009=((0.84)*r01*x998);
IkReal x1010=((((8.442)*x996))+(((8.442)*r21*x998))+(((8.442)*x1004))+(((0.06)*x997)));
IkReal x1011=((((2.814)*x996))+(((2.814)*r21*x998))+(((0.02)*x997))+(((2.814)*x1004)));
IkReal x1012=(x1007+x1006+x1001+x1000+x993);
IkReal x1013=(x1009+x1008+x1003+x1002+x994);
op[0]=((2.2)+x1013+(((-1.0)*x1011)));
op[1]=0;
op[2]=((2.2)+x1012+(((-1.0)*x1010)));
op[3]=0;
op[4]=((-2.2)+x1012+(((-1.0)*x1010)));
op[5]=0;
op[6]=((-2.2)+x1013+(((-1.0)*x1011)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1014=((0.84)*px);
IkReal x1015=((2.814)*pz);
IkReal x1016=((2.52)*px);
IkReal x1017=((8.442)*pz);
IkReal x1018=(r01*sj5);
IkReal x1019=(r21*sj5);
IkReal x1020=(cj4*r22);
IkReal x1021=(cj5*r20);
IkReal x1022=(cj5*r00);
IkReal x1023=((0.01407)*x1021);
IkReal x1024=((0.0042)*x1022);
IkReal x1025=((0.0126)*x1022);
IkReal x1026=((0.04221)*x1021);
IkReal x1027=((0.01407)*x1019);
IkReal x1028=((2.156049)*x1020);
IkReal x1029=((0.0042)*x1018);
IkReal x1030=(r20*sj4*sj5);
IkReal x1031=(cj5*r21*sj4);
IkReal x1032=((2.156049)*x1030);
IkReal x1033=((2.156049)*x1031);
IkReal x1034=(x1014+x1015+x1024+x1023);
IkReal x1035=(x1016+x1017+x1025+x1026);
IkReal x1036=((((6.468147)*x1031))+(((6.468147)*x1030))+(((0.04221)*x1019))+(((6.468147)*x1020))+(((0.0126)*x1018)));
IkReal x1037=(x1032+x1033+x1027+x1029+x1028);
j1evalpoly[0]=((-1.4091)+(((-0.924)*(htj1*htj1*htj1*htj1*htj1)))+(((-1.0)*x1037))+(((htj1*htj1*htj1*htj1)*(((1.9635)+(((-1.0)*x1036))+x1035))))+x1034+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.6863)+(((-1.0)*x1037))+x1034))))+(((-0.924)*htj1))+(((htj1*htj1)*(((-1.1319)+(((-1.0)*x1036))+x1035))))+(((-1.848)*(htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1038=(sj1*sj4);
IkReal x1039=(cj5*r01);
IkReal x1040=(r20*sj5);
IkReal x1041=(cj4*sj1);
IkReal x1042=(r00*sj5);
IkReal x1043=(cj1*sj4);
IkReal x1044=(cj5*r21);
IkReal x1045=(cj1*cj4);
if( IKabs((((r02*x1045))+((x1042*x1043))+(((-1.0)*x1038*x1044))+(((-1.0)*x1038*x1040))+((x1039*x1043))+(((-1.0)*r22*x1041)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1038*x1039))+((r02*x1041))+((x1038*x1042))+((x1043*x1044))+((x1040*x1043))+((r22*x1045)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x1045))+((x1042*x1043))+(((-1.0)*x1038*x1044))+(((-1.0)*x1038*x1040))+((x1039*x1043))+(((-1.0)*r22*x1041))))+IKsqr((((x1038*x1039))+((r02*x1041))+((x1038*x1042))+((x1043*x1044))+((x1040*x1043))+((r22*x1045))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r02*x1045))+((x1042*x1043))+(((-1.0)*x1038*x1044))+(((-1.0)*x1038*x1040))+((x1039*x1043))+(((-1.0)*r22*x1041))), (((x1038*x1039))+((r02*x1041))+((x1038*x1042))+((x1043*x1044))+((x1040*x1043))+((r22*x1045))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1046=IKcos(j2);
IkReal x1047=IKsin(j2);
IkReal x1048=(cj3*sj4);
IkReal x1049=((1.0)*cj5);
IkReal x1050=(r21*sj5);
IkReal x1051=(cj3*cj4);
IkReal x1052=((1.0)*sj5);
IkReal x1053=((0.005)*cj5);
IkReal x1054=((1.0)*cj4);
IkReal x1055=(r01*sj5);
IkReal x1056=(sj1*x1046);
IkReal x1057=(cj1*x1047);
IkReal x1058=(cj1*x1046);
IkReal x1059=(sj1*x1047);
IkReal x1060=(x1056+x1057);
evalcond[0]=((((-1.0)*r02*x1054))+x1060+(((-1.0)*r00*sj4*x1052))+(((-1.0)*r01*sj4*x1049)));
evalcond[1]=((((-1.0)*r21*sj4*x1049))+(((-1.0)*r20*sj4*x1052))+x1058+(((-1.0)*r22*x1054))+(((-1.0)*x1059)));
evalcond[2]=(x1060+(((-1.0)*r20*x1051*x1052))+((sj3*x1050))+(((-1.0)*r21*x1049*x1051))+(((-1.0)*r20*sj3*x1049))+((r22*x1048)));
evalcond[3]=(((r02*x1048))+x1059+((sj3*x1055))+(((-1.0)*r01*x1049*x1051))+(((-1.0)*x1058))+(((-1.0)*r00*sj3*x1049))+(((-1.0)*r00*x1051*x1052)));
evalcond[4]=((((-0.7035)*x1059))+(((-0.21)*x1057))+(((-0.21)*x1056))+(((0.005)*x1050))+(((-1.0)*pz))+(((0.55)*cj1))+(((-1.0)*r20*x1053))+(((0.7035)*x1058)));
evalcond[5]=((-0.165)+(((-1.0)*r00*x1053))+(((-0.21)*x1059))+(((0.005)*x1055))+(((-1.0)*px))+(((0.55)*sj1))+(((0.21)*x1058))+(((0.7035)*x1057))+(((0.7035)*x1056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1061=((1.0)*sj5);
IkReal x1062=((1.0)*cj5);
CheckValue<IkReal> x1063 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x1062))+((r21*sj5)))),IkReal(((((-1.0)*cj4*r20*x1061))+((r22*sj4))+(((-1.0)*cj4*r21*x1062)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1063.valid){
continue;
}
CheckValue<IkReal> x1064=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj4*x1062))+(((-1.0)*cj4*r02))+(((-1.0)*r00*sj4*x1061)))),-1);
if(!x1064.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1063.value)+(((1.5707963267949)*(x1064.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1065=IKsin(j3);
IkReal x1066=IKcos(j3);
IkReal x1067=(cj4*cj5);
IkReal x1068=(r12*sj4);
IkReal x1069=(cj5*r10);
IkReal x1070=((1.0)*x1066);
IkReal x1071=(r11*x1065);
IkReal x1072=((1.0)*x1065);
IkReal x1073=(sj5*x1066);
IkReal x1074=(cj4*sj5*x1065);
evalcond[0]=((((-1.0)*cj5*r20*x1070))+((r20*x1074))+((r21*x1065*x1067))+(((-1.0)*r22*sj4*x1072))+((r21*x1073)));
evalcond[1]=(((r01*x1065*x1067))+((r00*x1074))+(((-1.0)*cj5*r00*x1070))+((r01*x1073))+(((-1.0)*r02*sj4*x1072)));
evalcond[2]=((1.0)+((x1067*x1071))+(((-1.0)*x1068*x1072))+((r10*x1074))+(((-1.0)*x1069*x1070))+((r11*x1073)));
evalcond[3]=(((x1066*x1068))+(((-1.0)*cj4*r10*sj5*x1070))+(((-1.0)*r11*x1067*x1070))+((sj5*x1071))+(((-1.0)*x1069*x1072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1075=((12.0)*pz);
IkReal x1076=((2.52)*px);
IkReal x1077=((8.442)*pz);
IkReal x1078=(cj5*sj4);
IkReal x1079=(cj4*r02);
IkReal x1080=(cj5*r20);
IkReal x1081=(r01*sj5);
IkReal x1082=(r21*sj5);
IkReal x1083=(cj4*r22);
IkReal x1084=(cj5*r00);
IkReal x1085=((2.52)*x1079);
IkReal x1086=((0.06)*x1080);
IkReal x1087=((0.0126)*x1084);
IkReal x1088=((0.04221)*x1080);
IkReal x1089=(r20*sj4*sj5);
IkReal x1090=(r00*sj4*sj5);
IkReal x1091=((2.52)*r01*x1078);
IkReal x1092=((2.52)*x1090);
IkReal x1093=(x1076+x1077+x1087+x1088);
IkReal x1094=((((0.06)*x1082))+(((8.442)*r21*x1078))+(((8.442)*x1083))+(((8.442)*x1089)));
IkReal x1095=(x1075+x1091+x1092+x1086+x1085);
IkReal x1096=((((0.0126)*x1081))+(((0.04221)*x1082))+(((6.468147)*x1089))+(((6.468147)*x1083))+(((6.468147)*r21*x1078)));
j1eval[0]=((3.696)+(IKabs(((1.9635)+x1093+(((-1.0)*x1096)))))+(IKabs(((2.2)+x1095+(((-1.0)*x1094)))))+(IKabs(((1.6863)+(((-2.156049)*x1083))+(((-2.156049)*x1089))+(((-0.0042)*x1081))+(((0.84)*px))+(((0.0042)*x1084))+(((-0.01407)*x1082))+(((-2.156049)*r21*x1078))+(((2.814)*pz))+(((0.01407)*x1080)))))+(IKabs(((2.2)+(((0.84)*x1079))+(((-2.814)*r21*x1078))+(((0.02)*x1080))+(((4.0)*pz))+(((-2.814)*x1089))+(((-2.814)*x1083))+(((-0.02)*x1082))+(((0.84)*x1090))+(((0.84)*r01*x1078)))))+(IKabs(((-1.1319)+x1093+(((-1.0)*x1096)))))+(IKabs(((-2.2)+x1095+(((-1.0)*x1094))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1097=((12.0)*pz);
IkReal x1098=((4.0)*pz);
IkReal x1099=(cj5*r20);
IkReal x1100=(cj4*r22);
IkReal x1101=(r21*sj5);
IkReal x1102=(cj5*sj4);
IkReal x1103=(cj4*r02);
IkReal x1104=((2.52)*x1103);
IkReal x1105=((0.06)*x1099);
IkReal x1106=((0.02)*x1099);
IkReal x1107=((0.84)*x1103);
IkReal x1108=(r20*sj4*sj5);
IkReal x1109=(r00*sj4*sj5);
IkReal x1110=((2.52)*r01*x1102);
IkReal x1111=((2.52)*x1109);
IkReal x1112=((0.84)*x1109);
IkReal x1113=((0.84)*r01*x1102);
IkReal x1114=((((8.442)*x1100))+(((8.442)*x1108))+(((0.06)*x1101))+(((8.442)*r21*x1102)));
IkReal x1115=((((0.02)*x1101))+(((2.814)*x1108))+(((2.814)*x1100))+(((2.814)*r21*x1102)));
IkReal x1116=(x1104+x1105+x1111+x1110+x1097);
IkReal x1117=(x1106+x1107+x1113+x1112+x1098);
op[0]=((2.2)+x1117+(((-1.0)*x1115)));
op[1]=0;
op[2]=((2.2)+x1116+(((-1.0)*x1114)));
op[3]=0;
op[4]=((-2.2)+x1116+(((-1.0)*x1114)));
op[5]=0;
op[6]=((-2.2)+x1117+(((-1.0)*x1115)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1118=((0.84)*px);
IkReal x1119=((2.814)*pz);
IkReal x1120=((2.52)*px);
IkReal x1121=((8.442)*pz);
IkReal x1122=(r01*sj5);
IkReal x1123=(r21*sj5);
IkReal x1124=(cj4*r22);
IkReal x1125=(cj5*r20);
IkReal x1126=(cj5*r00);
IkReal x1127=((0.01407)*x1125);
IkReal x1128=((0.0042)*x1126);
IkReal x1129=((0.0126)*x1126);
IkReal x1130=((0.04221)*x1125);
IkReal x1131=((0.01407)*x1123);
IkReal x1132=((2.156049)*x1124);
IkReal x1133=((0.0042)*x1122);
IkReal x1134=(r20*sj4*sj5);
IkReal x1135=(cj5*r21*sj4);
IkReal x1136=((2.156049)*x1134);
IkReal x1137=((2.156049)*x1135);
IkReal x1138=(x1119+x1118+x1128+x1127);
IkReal x1139=(x1129+x1120+x1121+x1130);
IkReal x1140=((((6.468147)*x1124))+(((6.468147)*x1134))+(((6.468147)*x1135))+(((0.0126)*x1122))+(((0.04221)*x1123)));
IkReal x1141=(x1133+x1132+x1131+x1137+x1136);
j1evalpoly[0]=((-1.4091)+(((htj1*htj1)*(((-1.1319)+x1139+(((-1.0)*x1140))))))+x1138+(((-0.924)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.6863)+x1138+(((-1.0)*x1141))))))+(((-1.0)*x1141))+(((-0.924)*htj1))+(((htj1*htj1*htj1*htj1)*(((1.9635)+x1139+(((-1.0)*x1140))))))+(((-1.848)*(htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1142=(sj1*sj4);
IkReal x1143=(cj5*r01);
IkReal x1144=(r20*sj5);
IkReal x1145=(cj4*sj1);
IkReal x1146=(r00*sj5);
IkReal x1147=(cj1*sj4);
IkReal x1148=(cj5*r21);
IkReal x1149=(cj1*cj4);
if( IKabs((((x1143*x1147))+((x1146*x1147))+(((-1.0)*r22*x1145))+((r02*x1149))+(((-1.0)*x1142*x1144))+(((-1.0)*x1142*x1148)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1149))+((x1142*x1146))+((x1142*x1143))+((r02*x1145))+((x1147*x1148))+((x1144*x1147)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1143*x1147))+((x1146*x1147))+(((-1.0)*r22*x1145))+((r02*x1149))+(((-1.0)*x1142*x1144))+(((-1.0)*x1142*x1148))))+IKsqr((((r22*x1149))+((x1142*x1146))+((x1142*x1143))+((r02*x1145))+((x1147*x1148))+((x1144*x1147))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1143*x1147))+((x1146*x1147))+(((-1.0)*r22*x1145))+((r02*x1149))+(((-1.0)*x1142*x1144))+(((-1.0)*x1142*x1148))), (((r22*x1149))+((x1142*x1146))+((x1142*x1143))+((r02*x1145))+((x1147*x1148))+((x1144*x1147))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1150=IKcos(j2);
IkReal x1151=IKsin(j2);
IkReal x1152=(cj3*sj4);
IkReal x1153=((1.0)*cj5);
IkReal x1154=(r21*sj5);
IkReal x1155=(cj3*cj4);
IkReal x1156=((1.0)*sj5);
IkReal x1157=((0.005)*cj5);
IkReal x1158=((1.0)*cj4);
IkReal x1159=(r01*sj5);
IkReal x1160=(sj1*x1150);
IkReal x1161=(cj1*x1151);
IkReal x1162=(cj1*x1150);
IkReal x1163=(sj1*x1151);
IkReal x1164=(x1160+x1161);
evalcond[0]=(x1164+(((-1.0)*r01*sj4*x1153))+(((-1.0)*r02*x1158))+(((-1.0)*r00*sj4*x1156)));
evalcond[1]=(x1162+(((-1.0)*r20*sj4*x1156))+(((-1.0)*r21*sj4*x1153))+(((-1.0)*r22*x1158))+(((-1.0)*x1163)));
evalcond[2]=(x1164+((r22*x1152))+((sj3*x1154))+(((-1.0)*r20*x1155*x1156))+(((-1.0)*r20*sj3*x1153))+(((-1.0)*r21*x1153*x1155)));
evalcond[3]=(x1163+(((-1.0)*r00*x1155*x1156))+((r02*x1152))+((sj3*x1159))+(((-1.0)*r00*sj3*x1153))+(((-1.0)*r01*x1153*x1155))+(((-1.0)*x1162)));
evalcond[4]=((((-0.21)*x1161))+(((-0.21)*x1160))+(((0.005)*x1154))+(((-1.0)*pz))+(((-0.7035)*x1163))+(((0.7035)*x1162))+(((-1.0)*r20*x1157))+(((0.55)*cj1)));
evalcond[5]=((-0.165)+(((-0.21)*x1163))+(((-1.0)*r00*x1157))+(((0.005)*x1159))+(((-1.0)*px))+(((0.7035)*x1161))+(((0.7035)*x1160))+(((0.21)*x1162))+(((0.55)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1165=((1.0)*r00);
CheckValue<IkReal> x1166=IKPowWithIntegerCheck(IKsign((((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)))),-1);
if(!x1166.valid){
continue;
}
CheckValue<IkReal> x1167 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*x1165)))),IkReal(((((-1.0)*cj4*cj5*r01))+((r02*sj4))+(((-1.0)*cj4*sj5*x1165)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1167.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1166.value)))+(x1167.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1168=IKsin(j3);
IkReal x1169=IKcos(j3);
IkReal x1170=(cj4*cj5);
IkReal x1171=(r12*sj4);
IkReal x1172=(cj5*r10);
IkReal x1173=((1.0)*x1169);
IkReal x1174=(r11*x1168);
IkReal x1175=((1.0)*x1168);
IkReal x1176=(sj5*x1169);
IkReal x1177=(cj4*sj5*x1168);
evalcond[0]=((((-1.0)*cj5*r20*x1173))+((r20*x1177))+((r21*x1168*x1170))+((r21*x1176))+(((-1.0)*r22*sj4*x1175)));
evalcond[1]=(((r01*x1176))+((r00*x1177))+(((-1.0)*r02*sj4*x1175))+(((-1.0)*cj5*r00*x1173))+((r01*x1168*x1170)));
evalcond[2]=((1.0)+(((-1.0)*x1172*x1173))+((r10*x1177))+(((-1.0)*x1171*x1175))+((r11*x1176))+((x1170*x1174)));
evalcond[3]=((((-1.0)*r11*x1170*x1173))+(((-1.0)*cj4*r10*sj5*x1173))+(((-1.0)*x1172*x1175))+((sj5*x1174))+((x1169*x1171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1178=((12.0)*pz);
IkReal x1179=((2.52)*px);
IkReal x1180=((8.442)*pz);
IkReal x1181=(cj5*sj4);
IkReal x1182=(cj4*r02);
IkReal x1183=(cj5*r20);
IkReal x1184=(r01*sj5);
IkReal x1185=(r21*sj5);
IkReal x1186=(cj4*r22);
IkReal x1187=(cj5*r00);
IkReal x1188=((2.52)*x1182);
IkReal x1189=((0.06)*x1183);
IkReal x1190=((0.0126)*x1187);
IkReal x1191=((0.04221)*x1183);
IkReal x1192=(r20*sj4*sj5);
IkReal x1193=(r00*sj4*sj5);
IkReal x1194=((2.52)*r01*x1181);
IkReal x1195=((2.52)*x1193);
IkReal x1196=(x1180+x1191+x1190+x1179);
IkReal x1197=((((0.06)*x1185))+(((8.442)*x1192))+(((8.442)*x1186))+(((8.442)*r21*x1181)));
IkReal x1198=(x1188+x1189+x1195+x1194+x1178);
IkReal x1199=((((6.468147)*x1192))+(((0.04221)*x1185))+(((0.0126)*x1184))+(((6.468147)*r21*x1181))+(((6.468147)*x1186)));
j1eval[0]=((3.696)+(IKabs(((-1.1319)+x1196+(((-1.0)*x1199)))))+(IKabs(((1.9635)+x1196+(((-1.0)*x1199)))))+(IKabs(((1.6863)+(((0.01407)*x1183))+(((0.84)*px))+(((-0.0042)*x1184))+(((-2.156049)*r21*x1181))+(((0.0042)*x1187))+(((2.814)*pz))+(((-2.156049)*x1192))+(((-2.156049)*x1186))+(((-0.01407)*x1185)))))+(IKabs(((2.2)+(((0.02)*x1183))+(((4.0)*pz))+(((0.84)*x1182))+(((0.84)*r01*x1181))+(((0.84)*x1193))+(((-2.814)*r21*x1181))+(((-2.814)*x1186))+(((-2.814)*x1192))+(((-0.02)*x1185)))))+(IKabs(((2.2)+x1198+(((-1.0)*x1197)))))+(IKabs(((-2.2)+x1198+(((-1.0)*x1197))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1200=((12.0)*pz);
IkReal x1201=((4.0)*pz);
IkReal x1202=(cj5*r20);
IkReal x1203=(cj4*r22);
IkReal x1204=(r21*sj5);
IkReal x1205=(cj5*sj4);
IkReal x1206=(cj4*r02);
IkReal x1207=((2.52)*x1206);
IkReal x1208=((0.06)*x1202);
IkReal x1209=((0.02)*x1202);
IkReal x1210=((0.84)*x1206);
IkReal x1211=(r20*sj4*sj5);
IkReal x1212=(r00*sj4*sj5);
IkReal x1213=((2.52)*r01*x1205);
IkReal x1214=((2.52)*x1212);
IkReal x1215=((0.84)*x1212);
IkReal x1216=((0.84)*r01*x1205);
IkReal x1217=((((8.442)*r21*x1205))+(((8.442)*x1211))+(((8.442)*x1203))+(((0.06)*x1204)));
IkReal x1218=((((0.02)*x1204))+(((2.814)*x1211))+(((2.814)*r21*x1205))+(((2.814)*x1203)));
IkReal x1219=(x1208+x1207+x1200+x1213+x1214);
IkReal x1220=(x1209+x1201+x1210+x1216+x1215);
op[0]=((2.2)+x1220+(((-1.0)*x1218)));
op[1]=0;
op[2]=((2.2)+x1219+(((-1.0)*x1217)));
op[3]=0;
op[4]=((-2.2)+x1219+(((-1.0)*x1217)));
op[5]=0;
op[6]=((-2.2)+x1220+(((-1.0)*x1218)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1221=((0.84)*px);
IkReal x1222=((2.814)*pz);
IkReal x1223=((2.52)*px);
IkReal x1224=((8.442)*pz);
IkReal x1225=(r01*sj5);
IkReal x1226=(r21*sj5);
IkReal x1227=(cj4*r22);
IkReal x1228=(cj5*r20);
IkReal x1229=(cj5*r00);
IkReal x1230=((0.01407)*x1228);
IkReal x1231=((0.0042)*x1229);
IkReal x1232=((0.0126)*x1229);
IkReal x1233=((0.04221)*x1228);
IkReal x1234=((0.01407)*x1226);
IkReal x1235=((2.156049)*x1227);
IkReal x1236=((0.0042)*x1225);
IkReal x1237=(r20*sj4*sj5);
IkReal x1238=(cj5*r21*sj4);
IkReal x1239=((2.156049)*x1237);
IkReal x1240=((2.156049)*x1238);
IkReal x1241=(x1230+x1231+x1222+x1221);
IkReal x1242=(x1232+x1233+x1224+x1223);
IkReal x1243=((((0.04221)*x1226))+(((6.468147)*x1238))+(((6.468147)*x1237))+(((6.468147)*x1227))+(((0.0126)*x1225)));
IkReal x1244=(x1240+x1234+x1235+x1236+x1239);
j1evalpoly[0]=((-1.4091)+(((-0.924)*(htj1*htj1*htj1*htj1*htj1)))+x1241+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.6863)+x1241+(((-1.0)*x1244))))))+(((htj1*htj1*htj1*htj1)*(((1.9635)+x1242+(((-1.0)*x1243))))))+(((-0.924)*htj1))+(((-1.0)*x1244))+(((-1.848)*(htj1*htj1*htj1)))+(((htj1*htj1)*(((-1.1319)+x1242+(((-1.0)*x1243)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1245=(sj1*sj4);
IkReal x1246=(cj5*r01);
IkReal x1247=(r20*sj5);
IkReal x1248=(cj4*sj1);
IkReal x1249=(r00*sj5);
IkReal x1250=(cj1*sj4);
IkReal x1251=(cj5*r21);
IkReal x1252=(cj1*cj4);
if( IKabs((((x1246*x1250))+(((-1.0)*x1245*x1247))+((r02*x1252))+(((-1.0)*x1245*x1251))+((x1249*x1250))+(((-1.0)*r22*x1248)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1247*x1250))+((r22*x1252))+((x1250*x1251))+((r02*x1248))+((x1245*x1246))+((x1245*x1249)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1246*x1250))+(((-1.0)*x1245*x1247))+((r02*x1252))+(((-1.0)*x1245*x1251))+((x1249*x1250))+(((-1.0)*r22*x1248))))+IKsqr((((x1247*x1250))+((r22*x1252))+((x1250*x1251))+((r02*x1248))+((x1245*x1246))+((x1245*x1249))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1246*x1250))+(((-1.0)*x1245*x1247))+((r02*x1252))+(((-1.0)*x1245*x1251))+((x1249*x1250))+(((-1.0)*r22*x1248))), (((x1247*x1250))+((r22*x1252))+((x1250*x1251))+((r02*x1248))+((x1245*x1246))+((x1245*x1249))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1253=IKcos(j2);
IkReal x1254=IKsin(j2);
IkReal x1255=(cj3*sj4);
IkReal x1256=((1.0)*cj5);
IkReal x1257=(r21*sj5);
IkReal x1258=(cj3*cj4);
IkReal x1259=((1.0)*sj5);
IkReal x1260=((0.005)*cj5);
IkReal x1261=((1.0)*cj4);
IkReal x1262=(r01*sj5);
IkReal x1263=(sj1*x1253);
IkReal x1264=(cj1*x1254);
IkReal x1265=(cj1*x1253);
IkReal x1266=(sj1*x1254);
IkReal x1267=(x1263+x1264);
evalcond[0]=(x1267+(((-1.0)*r00*sj4*x1259))+(((-1.0)*r01*sj4*x1256))+(((-1.0)*r02*x1261)));
evalcond[1]=(x1265+(((-1.0)*r22*x1261))+(((-1.0)*r21*sj4*x1256))+(((-1.0)*x1266))+(((-1.0)*r20*sj4*x1259)));
evalcond[2]=(x1267+(((-1.0)*r20*x1258*x1259))+((r22*x1255))+(((-1.0)*r20*sj3*x1256))+((sj3*x1257))+(((-1.0)*r21*x1256*x1258)));
evalcond[3]=(x1266+((r02*x1255))+(((-1.0)*r00*x1258*x1259))+(((-1.0)*x1265))+(((-1.0)*r00*sj3*x1256))+((sj3*x1262))+(((-1.0)*r01*x1256*x1258)));
evalcond[4]=((((0.7035)*x1265))+(((-0.7035)*x1266))+(((-0.21)*x1264))+(((-0.21)*x1263))+(((0.005)*x1257))+(((-1.0)*pz))+(((0.55)*cj1))+(((-1.0)*r20*x1260)));
evalcond[5]=((-0.165)+(((0.7035)*x1263))+(((0.7035)*x1264))+(((0.21)*x1265))+(((-0.21)*x1266))+(((-1.0)*r00*x1260))+(((0.005)*x1262))+(((-1.0)*px))+(((0.55)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1268=((1.0)*r20);
IkReal x1269=(((r00*sj4*sj5))+((cj5*r01*sj4))+((cj4*r02)));
j3eval[0]=x1269;
j3eval[1]=IKsign(x1269);
j3eval[2]=((IKabs((((r22*sj4))+(((-1.0)*cj4*cj5*r21))+(((-1.0)*cj4*sj5*x1268)))))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x1268))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1270=((1.0)*sj4);
IkReal x1271=((1.0)*cj4);
IkReal x1272=((((-1.0)*r22*x1271))+(((-1.0)*r20*sj5*x1270))+(((-1.0)*cj5*r21*x1270)));
j3eval[0]=x1272;
j3eval[1]=((IKabs(((((-1.0)*cj5*r01*x1271))+((r02*sj4))+(((-1.0)*r00*sj5*x1271)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j3eval[2]=IKsign(x1272);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1273=cj4*cj4;
IkReal x1274=cj5*cj5;
IkReal x1275=r10*r10;
IkReal x1276=r11*r11;
IkReal x1277=r12*r12;
IkReal x1278=(cj5*r10);
IkReal x1279=((1.0)*x1273);
IkReal x1280=(cj4*r10*sj5);
IkReal x1281=((2.0)*r12*sj4);
IkReal x1282=((2.0)*r11*sj5);
IkReal x1283=(cj4*cj5*r11);
IkReal x1284=(x1274*x1276);
IkReal x1285=(x1274*x1275);
IkReal x1286=((((-1.0)*x1285))+x1284+(((-1.0)*x1273*x1278*x1282))+((x1278*x1282))+(((-1.0)*x1275*x1279))+((x1273*x1277))+(((-1.0)*x1276))+(((-1.0)*x1277))+((x1280*x1281))+(((-1.0)*x1279*x1284))+((x1273*x1285))+((x1281*x1283)));
j3eval[0]=x1286;
j3eval[1]=IKsign(x1286);
j3eval[2]=((IKabs((x1278+(((-1.0)*r11*sj5)))))+(IKabs(((((-1.0)*x1283))+(((-1.0)*x1280))+((r12*sj4))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1287=cj4*cj4;
IkReal x1288=cj5*cj5;
IkReal x1289=r10*r10;
IkReal x1290=r11*r11;
IkReal x1291=r12*r12;
IkReal x1292=(cj5*r11);
IkReal x1293=(r10*sj5);
IkReal x1294=((1.0)*cj4);
IkReal x1295=((1.0)*x1287);
IkReal x1296=(x1288*x1290);
IkReal x1297=((2.0)*cj4*r12*sj4);
IkReal x1298=(x1288*x1289);
CheckValue<IkReal> x1299=IKPowWithIntegerCheck(IKsign(((((2.0)*x1292*x1293))+x1296+((x1287*x1298))+((x1287*x1291))+(((-1.0)*x1289*x1295))+((x1293*x1297))+(((-1.0)*x1295*x1296))+(((-1.0)*x1298))+(((-1.0)*x1290))+(((-1.0)*x1291))+(((-2.0)*x1287*x1292*x1293))+((x1292*x1297)))),-1);
if(!x1299.valid){
continue;
}
CheckValue<IkReal> x1300 = IKatan2WithCheck(IkReal(((((-1.0)*x1293*x1294))+(((-1.0)*x1292*x1294))+((r12*sj4)))),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1300.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1299.value)))+(x1300.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1301=IKsin(j3);
IkReal x1302=IKcos(j3);
IkReal x1303=(cj4*cj5);
IkReal x1304=(r12*sj4);
IkReal x1305=(cj5*r10);
IkReal x1306=((1.0)*x1302);
IkReal x1307=(r11*x1301);
IkReal x1308=((1.0)*x1301);
IkReal x1309=(sj5*x1302);
IkReal x1310=(cj4*sj5*x1301);
evalcond[0]=(((r21*x1301*x1303))+(((-1.0)*r22*sj4*x1308))+((r21*x1309))+((r20*x1310))+(((-1.0)*cj5*r20*x1306)));
evalcond[1]=(((r00*x1310))+((r01*x1301*x1303))+(((-1.0)*cj5*r00*x1306))+((r01*x1309))+(((-1.0)*r02*sj4*x1308)));
evalcond[2]=((-1.0)+((r10*x1310))+((x1303*x1307))+((r11*x1309))+(((-1.0)*x1305*x1306))+(((-1.0)*x1304*x1308)));
evalcond[3]=(((sj5*x1307))+(((-1.0)*cj4*r10*sj5*x1306))+(((-1.0)*r11*x1303*x1306))+((x1302*x1304))+(((-1.0)*x1305*x1308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1311=((12.0)*pz);
IkReal x1312=((4.0)*pz);
IkReal x1313=(cj5*sj4);
IkReal x1314=((2.52)*cj4);
IkReal x1315=(cj5*r20);
IkReal x1316=((2.52)*sj3);
IkReal x1317=(sj4*sj5);
IkReal x1318=((0.84)*cj3);
IkReal x1319=(r22*sj4);
IkReal x1320=(cj5*r21);
IkReal x1321=(r20*sj5);
IkReal x1322=((0.84)*sj3);
IkReal x1323=(r21*sj5);
IkReal x1324=(cj4*r22);
IkReal x1325=((0.06)*x1315);
IkReal x1326=((8.442)*x1324);
IkReal x1327=((0.06)*x1323);
IkReal x1328=(r02*x1314);
IkReal x1329=((0.02)*x1315);
IkReal x1330=((2.814)*x1324);
IkReal x1331=((0.02)*x1323);
IkReal x1332=((8.442)*r20*x1317);
IkReal x1333=((8.442)*r21*x1313);
IkReal x1334=(x1315*x1316);
IkReal x1335=((2.52)*r01*x1313);
IkReal x1336=((2.52)*r00*x1317);
IkReal x1337=((2.814)*r21*x1313);
IkReal x1338=((2.814)*r20*x1317);
IkReal x1339=(cj3*x1314*x1320);
IkReal x1340=(cj3*x1314*x1321);
IkReal x1341=(x1311+x1325);
IkReal x1342=(x1312+x1329);
IkReal x1343=(x1328+x1335+x1336);
IkReal x1344=(x1326+x1327+x1333+x1332);
IkReal x1345=(x1338+x1337+x1331+x1330);
IkReal x1346=(x1340+x1341+x1339+x1334);
IkReal x1347=(x1344+((x1316*x1323))+(((2.52)*cj3*x1319)));
j1eval[0]=((IKabs(((2.2)+x1343+x1344+(((-1.0)*x1341)))))+(IKabs(((2.2)+x1346+(((-1.0)*x1347)))))+(IKabs(((-2.2)+x1346+(((-1.0)*x1347)))))+(IKabs(((-2.2)+x1343+x1344+(((-1.0)*x1341)))))+(IKabs(((-2.2)+x1345+(((-1.0)*x1342))+(((0.84)*r00*x1317))+(((0.84)*r01*x1313))+(((0.84)*cj4*r02)))))+(IKabs(((2.2)+x1342+(((-1.0)*x1318*x1319))+(((-1.0)*x1322*x1323))+(((-1.0)*x1345))+((cj4*x1318*x1321))+((cj4*x1318*x1320))+((x1315*x1322))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1348=(cj5*r20);
IkReal x1349=(cj4*r22);
IkReal x1350=(r21*sj5);
IkReal x1351=((2.814)*sj4);
IkReal x1352=(r20*sj5);
IkReal x1353=(cj5*r21);
IkReal x1354=((2.52)*sj4);
IkReal x1355=(r00*sj5);
IkReal x1356=(cj4*r02);
IkReal x1357=(cj5*r01);
IkReal x1358=((8.442)*sj4);
IkReal x1359=((0.84)*sj4);
IkReal x1360=((2.52)*x1356);
IkReal x1361=((8.442)*x1349);
IkReal x1362=((0.06)*x1350);
IkReal x1363=((2.814)*x1349);
IkReal x1364=((0.02)*x1350);
IkReal x1365=((0.84)*x1356);
IkReal x1366=(x1352*x1358);
IkReal x1367=(x1353*x1358);
IkReal x1368=(x1354*x1357);
IkReal x1369=(x1354*x1355);
IkReal x1370=(x1351*x1353);
IkReal x1371=(x1355*x1359);
IkReal x1372=(x1357*x1359);
IkReal x1373=(x1351*x1352);
IkReal x1374=((((0.06)*x1348))+(((12.0)*pz)));
IkReal x1375=((((4.0)*pz))+(((0.02)*x1348)));
IkReal x1376=(x1366+x1367+x1362+x1360+x1361+x1368+x1369);
IkReal x1377=(x1364+x1365+x1363+x1371+x1370+x1373+x1372);
op[0]=((-2.2)+x1377+(((-1.0)*x1375)));
op[1]=0;
op[2]=((-2.2)+x1376+(((-1.0)*x1374)));
op[3]=0;
op[4]=((2.2)+x1376+(((-1.0)*x1374)));
op[5]=0;
op[6]=((2.2)+x1377+(((-1.0)*x1375)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1378=((4.0)*pz);
IkReal x1379=((12.0)*pz);
IkReal x1380=(r20*sj5);
IkReal x1381=((0.84)*cj3);
IkReal x1382=((8.442)*sj4);
IkReal x1383=(cj5*r20);
IkReal x1384=(r22*sj4);
IkReal x1385=((2.52)*sj3);
IkReal x1386=(cj5*r21);
IkReal x1387=((2.814)*sj4);
IkReal x1388=((0.84)*sj3);
IkReal x1389=(r21*sj5);
IkReal x1390=(cj4*r22);
IkReal x1391=((0.02)*x1383);
IkReal x1392=((0.06)*x1383);
IkReal x1393=((2.52)*cj3*cj4);
IkReal x1394=(x1383*x1388);
IkReal x1395=(x1383*x1385);
IkReal x1396=(cj4*x1380*x1381);
IkReal x1397=(cj4*x1381*x1386);
IkReal x1398=(x1386*x1393);
IkReal x1399=(x1380*x1393);
IkReal x1400=(x1378+x1397+x1396+x1394+x1391);
IkReal x1401=(x1379+x1399+x1398+x1395+x1392);
IkReal x1402=(((x1380*x1382))+(((8.442)*x1390))+(((2.52)*cj3*x1384))+(((0.06)*x1389))+((x1385*x1389))+((x1382*x1386)));
IkReal x1403=(((x1380*x1387))+((x1381*x1384))+((x1388*x1389))+(((0.02)*x1389))+(((2.814)*x1390))+((x1386*x1387)));
j1evalpoly[0]=((-2.2)+(((htj1*htj1*htj1*htj1)*(((2.2)+(((-1.0)*x1402))+x1401))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((2.2)+(((-1.0)*x1403))+x1400))))+(((-1.0)*x1403))+x1400+(((htj1*htj1)*(((-2.2)+(((-1.0)*x1402))+x1401)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1404=((1.0)*sj1);
IkReal x1405=(sj4*sj5);
IkReal x1406=(cj4*r22);
IkReal x1407=(cj5*sj4);
IkReal x1408=(cj4*r02);
IkReal x1409=((1.0)*cj1);
if( IKabs(((((-1.0)*r00*x1405*x1409))+(((-1.0)*r01*x1407*x1409))+(((-1.0)*x1404*x1406))+(((-1.0)*r21*x1404*x1407))+(((-1.0)*r20*x1404*x1405))+(((-1.0)*x1408*x1409)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1404*x1405))+((cj1*r21*x1407))+((cj1*r20*x1405))+(((-1.0)*x1404*x1408))+((cj1*x1406))+(((-1.0)*r01*x1404*x1407)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1405*x1409))+(((-1.0)*r01*x1407*x1409))+(((-1.0)*x1404*x1406))+(((-1.0)*r21*x1404*x1407))+(((-1.0)*r20*x1404*x1405))+(((-1.0)*x1408*x1409))))+IKsqr(((((-1.0)*r00*x1404*x1405))+((cj1*r21*x1407))+((cj1*r20*x1405))+(((-1.0)*x1404*x1408))+((cj1*x1406))+(((-1.0)*r01*x1404*x1407))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r00*x1405*x1409))+(((-1.0)*r01*x1407*x1409))+(((-1.0)*x1404*x1406))+(((-1.0)*r21*x1404*x1407))+(((-1.0)*r20*x1404*x1405))+(((-1.0)*x1408*x1409))), ((((-1.0)*r00*x1404*x1405))+((cj1*r21*x1407))+((cj1*r20*x1405))+(((-1.0)*x1404*x1408))+((cj1*x1406))+(((-1.0)*r01*x1404*x1407))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1410=IKcos(j2);
IkReal x1411=IKsin(j2);
IkReal x1412=(cj3*sj4);
IkReal x1413=((1.0)*cj5);
IkReal x1414=(cj3*cj4);
IkReal x1415=(r21*sj5);
IkReal x1416=((0.005)*cj5);
IkReal x1417=((1.0)*cj4);
IkReal x1418=(r01*sj5);
IkReal x1419=(cj1*x1410);
IkReal x1420=(sj1*x1411);
IkReal x1421=(cj1*x1411);
IkReal x1422=(sj1*x1410);
IkReal x1423=((1.0)*r20*sj5);
IkReal x1424=((1.0)*r00*sj5);
IkReal x1425=((1.0)*x1420);
evalcond[0]=((((-1.0)*r21*sj4*x1413))+(((-1.0)*r22*x1417))+x1419+(((-1.0)*sj4*x1423))+(((-1.0)*x1425)));
evalcond[1]=((((-1.0)*r01*sj4*x1413))+(((-1.0)*r02*x1417))+(((-1.0)*x1421))+(((-1.0)*x1422))+(((-1.0)*sj4*x1424)));
evalcond[2]=(((r22*x1412))+x1421+x1422+(((-1.0)*x1414*x1423))+(((-1.0)*r21*x1413*x1414))+(((-1.0)*r20*sj3*x1413))+((sj3*x1415)));
evalcond[3]=((((-1.0)*r01*x1413*x1414))+(((-1.0)*r00*sj3*x1413))+x1419+((r02*x1412))+(((-1.0)*x1414*x1424))+((sj3*x1418))+(((-1.0)*x1425)));
evalcond[4]=((((0.005)*x1415))+(((-0.21)*x1422))+(((-0.21)*x1421))+(((-1.0)*pz))+(((-0.7035)*x1420))+(((-1.0)*r20*x1416))+(((0.55)*cj1))+(((0.7035)*x1419)));
evalcond[5]=((0.165)+(((0.21)*x1420))+(((0.005)*x1418))+(((-1.0)*px))+(((-0.21)*x1419))+(((-0.7035)*x1421))+(((-0.7035)*x1422))+(((-1.0)*r00*x1416))+(((-0.55)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1426=((1.0)*sj4);
IkReal x1427=((1.0)*cj4);
CheckValue<IkReal> x1428=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj5*x1426))+(((-1.0)*r22*x1427))+(((-1.0)*cj5*r21*x1426)))),-1);
if(!x1428.valid){
continue;
}
CheckValue<IkReal> x1429 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal((((r02*sj4))+(((-1.0)*cj5*r01*x1427))+(((-1.0)*r00*sj5*x1427)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1429.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1428.value)))+(x1429.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1430=IKsin(j3);
IkReal x1431=IKcos(j3);
IkReal x1432=(cj4*cj5);
IkReal x1433=(r12*sj4);
IkReal x1434=(cj5*r10);
IkReal x1435=((1.0)*x1431);
IkReal x1436=(r11*x1430);
IkReal x1437=((1.0)*x1430);
IkReal x1438=(sj5*x1431);
IkReal x1439=(cj4*sj5*x1430);
evalcond[0]=((((-1.0)*cj5*r20*x1435))+(((-1.0)*r22*sj4*x1437))+((r20*x1439))+((r21*x1438))+((r21*x1430*x1432)));
evalcond[1]=((((-1.0)*cj5*r00*x1435))+((r01*x1430*x1432))+(((-1.0)*r02*sj4*x1437))+((r01*x1438))+((r00*x1439)));
evalcond[2]=((-1.0)+((x1432*x1436))+(((-1.0)*x1434*x1435))+((r11*x1438))+(((-1.0)*x1433*x1437))+((r10*x1439)));
evalcond[3]=((((-1.0)*x1434*x1437))+((sj5*x1436))+(((-1.0)*r11*x1432*x1435))+(((-1.0)*cj4*r10*sj5*x1435))+((x1431*x1433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1440=((12.0)*pz);
IkReal x1441=((4.0)*pz);
IkReal x1442=(cj5*sj4);
IkReal x1443=((2.52)*cj4);
IkReal x1444=(cj5*r20);
IkReal x1445=((2.52)*sj3);
IkReal x1446=(sj4*sj5);
IkReal x1447=((0.84)*cj3);
IkReal x1448=(r22*sj4);
IkReal x1449=(cj5*r21);
IkReal x1450=(r20*sj5);
IkReal x1451=((0.84)*sj3);
IkReal x1452=(r21*sj5);
IkReal x1453=(cj4*r22);
IkReal x1454=((0.06)*x1444);
IkReal x1455=((8.442)*x1453);
IkReal x1456=((0.06)*x1452);
IkReal x1457=(r02*x1443);
IkReal x1458=((0.02)*x1444);
IkReal x1459=((2.814)*x1453);
IkReal x1460=((0.02)*x1452);
IkReal x1461=((8.442)*r20*x1446);
IkReal x1462=((8.442)*r21*x1442);
IkReal x1463=(x1444*x1445);
IkReal x1464=((2.52)*r01*x1442);
IkReal x1465=((2.52)*r00*x1446);
IkReal x1466=((2.814)*r21*x1442);
IkReal x1467=((2.814)*r20*x1446);
IkReal x1468=(cj3*x1443*x1449);
IkReal x1469=(cj3*x1443*x1450);
IkReal x1470=(x1454+x1440);
IkReal x1471=(x1458+x1441);
IkReal x1472=(x1465+x1464+x1457);
IkReal x1473=(x1461+x1462+x1455+x1456);
IkReal x1474=(x1467+x1466+x1460+x1459);
IkReal x1475=(x1469+x1468+x1463+x1470);
IkReal x1476=(((x1445*x1452))+x1473+(((2.52)*cj3*x1448)));
j1eval[0]=((IKabs(((-2.2)+(((0.84)*r00*x1446))+x1474+(((-1.0)*x1471))+(((0.84)*r01*x1442))+(((0.84)*cj4*r02)))))+(IKabs(((-2.2)+x1472+x1473+(((-1.0)*x1470)))))+(IKabs(((2.2)+x1472+x1473+(((-1.0)*x1470)))))+(IKabs(((-2.2)+x1475+(((-1.0)*x1476)))))+(IKabs(((2.2)+(((-1.0)*x1447*x1448))+((cj4*x1447*x1450))+x1471+(((-1.0)*x1474))+((cj4*x1447*x1449))+(((-1.0)*x1451*x1452))+((x1444*x1451)))))+(IKabs(((2.2)+x1475+(((-1.0)*x1476))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1477=(cj5*r20);
IkReal x1478=(cj4*r22);
IkReal x1479=(r21*sj5);
IkReal x1480=((2.814)*sj4);
IkReal x1481=(r20*sj5);
IkReal x1482=(cj5*r21);
IkReal x1483=((2.52)*sj4);
IkReal x1484=(r00*sj5);
IkReal x1485=(cj4*r02);
IkReal x1486=(cj5*r01);
IkReal x1487=((8.442)*sj4);
IkReal x1488=((0.84)*sj4);
IkReal x1489=((2.52)*x1485);
IkReal x1490=((8.442)*x1478);
IkReal x1491=((0.06)*x1479);
IkReal x1492=((2.814)*x1478);
IkReal x1493=((0.02)*x1479);
IkReal x1494=((0.84)*x1485);
IkReal x1495=(x1481*x1487);
IkReal x1496=(x1482*x1487);
IkReal x1497=(x1483*x1486);
IkReal x1498=(x1483*x1484);
IkReal x1499=(x1480*x1482);
IkReal x1500=(x1484*x1488);
IkReal x1501=(x1486*x1488);
IkReal x1502=(x1480*x1481);
IkReal x1503=((((12.0)*pz))+(((0.06)*x1477)));
IkReal x1504=((((4.0)*pz))+(((0.02)*x1477)));
IkReal x1505=(x1490+x1491+x1495+x1496+x1497+x1498+x1489);
IkReal x1506=(x1502+x1500+x1501+x1492+x1493+x1494+x1499);
op[0]=((-2.2)+(((-1.0)*x1504))+x1506);
op[1]=0;
op[2]=((-2.2)+(((-1.0)*x1503))+x1505);
op[3]=0;
op[4]=((2.2)+(((-1.0)*x1503))+x1505);
op[5]=0;
op[6]=((2.2)+(((-1.0)*x1504))+x1506);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1507=((4.0)*pz);
IkReal x1508=((12.0)*pz);
IkReal x1509=(r20*sj5);
IkReal x1510=((0.84)*cj3);
IkReal x1511=((8.442)*sj4);
IkReal x1512=(cj5*r20);
IkReal x1513=(r22*sj4);
IkReal x1514=((2.52)*sj3);
IkReal x1515=(cj5*r21);
IkReal x1516=((2.814)*sj4);
IkReal x1517=((0.84)*sj3);
IkReal x1518=(r21*sj5);
IkReal x1519=(cj4*r22);
IkReal x1520=((0.02)*x1512);
IkReal x1521=((0.06)*x1512);
IkReal x1522=((2.52)*cj3*cj4);
IkReal x1523=(x1512*x1517);
IkReal x1524=(x1512*x1514);
IkReal x1525=(cj4*x1509*x1510);
IkReal x1526=(cj4*x1510*x1515);
IkReal x1527=(x1515*x1522);
IkReal x1528=(x1509*x1522);
IkReal x1529=(x1525+x1526+x1520+x1523+x1507);
IkReal x1530=(x1524+x1527+x1521+x1528+x1508);
IkReal x1531=(((x1509*x1511))+((x1514*x1518))+(((2.52)*cj3*x1513))+(((8.442)*x1519))+(((0.06)*x1518))+((x1511*x1515)));
IkReal x1532=(((x1509*x1516))+((x1510*x1513))+(((0.02)*x1518))+((x1515*x1516))+(((2.814)*x1519))+((x1517*x1518)));
j1evalpoly[0]=((-2.2)+(((-1.0)*x1532))+(((htj1*htj1*htj1*htj1)*(((2.2)+(((-1.0)*x1531))+x1530))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((2.2)+(((-1.0)*x1532))+x1529))))+x1529+(((htj1*htj1)*(((-2.2)+(((-1.0)*x1531))+x1530)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1533=((1.0)*sj1);
IkReal x1534=(sj4*sj5);
IkReal x1535=(cj4*r22);
IkReal x1536=(cj5*sj4);
IkReal x1537=(cj4*r02);
IkReal x1538=((1.0)*cj1);
if( IKabs(((((-1.0)*r00*x1534*x1538))+(((-1.0)*r21*x1533*x1536))+(((-1.0)*x1537*x1538))+(((-1.0)*r20*x1533*x1534))+(((-1.0)*r01*x1536*x1538))+(((-1.0)*x1533*x1535)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1533*x1536))+((cj1*x1535))+((cj1*r21*x1536))+((cj1*r20*x1534))+(((-1.0)*x1533*x1537))+(((-1.0)*r00*x1533*x1534)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1534*x1538))+(((-1.0)*r21*x1533*x1536))+(((-1.0)*x1537*x1538))+(((-1.0)*r20*x1533*x1534))+(((-1.0)*r01*x1536*x1538))+(((-1.0)*x1533*x1535))))+IKsqr(((((-1.0)*r01*x1533*x1536))+((cj1*x1535))+((cj1*r21*x1536))+((cj1*r20*x1534))+(((-1.0)*x1533*x1537))+(((-1.0)*r00*x1533*x1534))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r00*x1534*x1538))+(((-1.0)*r21*x1533*x1536))+(((-1.0)*x1537*x1538))+(((-1.0)*r20*x1533*x1534))+(((-1.0)*r01*x1536*x1538))+(((-1.0)*x1533*x1535))), ((((-1.0)*r01*x1533*x1536))+((cj1*x1535))+((cj1*r21*x1536))+((cj1*r20*x1534))+(((-1.0)*x1533*x1537))+(((-1.0)*r00*x1533*x1534))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1539=IKcos(j2);
IkReal x1540=IKsin(j2);
IkReal x1541=(cj3*sj4);
IkReal x1542=((1.0)*cj5);
IkReal x1543=(cj3*cj4);
IkReal x1544=(r21*sj5);
IkReal x1545=((0.005)*cj5);
IkReal x1546=((1.0)*cj4);
IkReal x1547=(r01*sj5);
IkReal x1548=(cj1*x1539);
IkReal x1549=(sj1*x1540);
IkReal x1550=(cj1*x1540);
IkReal x1551=(sj1*x1539);
IkReal x1552=((1.0)*r20*sj5);
IkReal x1553=((1.0)*r00*sj5);
IkReal x1554=((1.0)*x1549);
evalcond[0]=((((-1.0)*r22*x1546))+x1548+(((-1.0)*r21*sj4*x1542))+(((-1.0)*sj4*x1552))+(((-1.0)*x1554)));
evalcond[1]=((((-1.0)*x1550))+(((-1.0)*x1551))+(((-1.0)*r02*x1546))+(((-1.0)*r01*sj4*x1542))+(((-1.0)*sj4*x1553)));
evalcond[2]=((((-1.0)*r21*x1542*x1543))+(((-1.0)*r20*sj3*x1542))+(((-1.0)*x1543*x1552))+x1551+x1550+((r22*x1541))+((sj3*x1544)));
evalcond[3]=((((-1.0)*r00*sj3*x1542))+(((-1.0)*x1543*x1553))+x1548+(((-1.0)*r01*x1542*x1543))+((r02*x1541))+(((-1.0)*x1554))+((sj3*x1547)));
evalcond[4]=((((-0.7035)*x1549))+(((0.7035)*x1548))+(((-1.0)*pz))+(((-1.0)*r20*x1545))+(((-0.21)*x1550))+(((-0.21)*x1551))+(((0.55)*cj1))+(((0.005)*x1544)));
evalcond[5]=((0.165)+(((-0.7035)*x1550))+(((-0.7035)*x1551))+(((-1.0)*px))+(((-1.0)*r00*x1545))+(((-0.21)*x1548))+(((-0.55)*sj1))+(((0.005)*x1547))+(((0.21)*x1549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1555=((1.0)*r20);
CheckValue<IkReal> x1556 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x1555))+((r21*sj5)))),IkReal(((((-1.0)*cj4*sj5*x1555))+((r22*sj4))+(((-1.0)*cj4*cj5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1556.valid){
continue;
}
CheckValue<IkReal> x1557=IKPowWithIntegerCheck(IKsign((((r00*sj4*sj5))+((cj5*r01*sj4))+((cj4*r02)))),-1);
if(!x1557.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1556.value)+(((1.5707963267949)*(x1557.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1558=IKsin(j3);
IkReal x1559=IKcos(j3);
IkReal x1560=(cj4*cj5);
IkReal x1561=(r12*sj4);
IkReal x1562=(cj5*r10);
IkReal x1563=((1.0)*x1559);
IkReal x1564=(r11*x1558);
IkReal x1565=((1.0)*x1558);
IkReal x1566=(sj5*x1559);
IkReal x1567=(cj4*sj5*x1558);
evalcond[0]=(((r20*x1567))+((r21*x1558*x1560))+(((-1.0)*r22*sj4*x1565))+((r21*x1566))+(((-1.0)*cj5*r20*x1563)));
evalcond[1]=(((r01*x1558*x1560))+(((-1.0)*cj5*r00*x1563))+((r00*x1567))+(((-1.0)*r02*sj4*x1565))+((r01*x1566)));
evalcond[2]=((-1.0)+((x1560*x1564))+(((-1.0)*x1562*x1563))+((r11*x1566))+((r10*x1567))+(((-1.0)*x1561*x1565)));
evalcond[3]=((((-1.0)*x1562*x1565))+(((-1.0)*r11*x1560*x1563))+((sj5*x1564))+(((-1.0)*cj4*r10*sj5*x1563))+((x1559*x1561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1568=((12.0)*pz);
IkReal x1569=((4.0)*pz);
IkReal x1570=(cj5*sj4);
IkReal x1571=((2.52)*cj4);
IkReal x1572=(cj5*r20);
IkReal x1573=((2.52)*sj3);
IkReal x1574=(sj4*sj5);
IkReal x1575=((0.84)*cj3);
IkReal x1576=(r22*sj4);
IkReal x1577=(cj5*r21);
IkReal x1578=(r20*sj5);
IkReal x1579=((0.84)*sj3);
IkReal x1580=(r21*sj5);
IkReal x1581=(cj4*r22);
IkReal x1582=((0.06)*x1572);
IkReal x1583=((8.442)*x1581);
IkReal x1584=((0.06)*x1580);
IkReal x1585=(r02*x1571);
IkReal x1586=((0.02)*x1572);
IkReal x1587=((2.814)*x1581);
IkReal x1588=((0.02)*x1580);
IkReal x1589=((8.442)*r20*x1574);
IkReal x1590=((8.442)*r21*x1570);
IkReal x1591=(x1572*x1573);
IkReal x1592=((2.52)*r01*x1570);
IkReal x1593=((2.52)*r00*x1574);
IkReal x1594=((2.814)*r21*x1570);
IkReal x1595=((2.814)*r20*x1574);
IkReal x1596=(cj3*x1571*x1577);
IkReal x1597=(cj3*x1571*x1578);
IkReal x1598=(x1568+x1582);
IkReal x1599=(x1569+x1586);
IkReal x1600=(x1585+x1593+x1592);
IkReal x1601=(x1589+x1583+x1584+x1590);
IkReal x1602=(x1588+x1587+x1595+x1594);
IkReal x1603=(x1597+x1596+x1591+x1598);
IkReal x1604=(x1601+(((2.52)*cj3*x1576))+((x1573*x1580)));
j1eval[0]=((IKabs(((-2.2)+(((-1.0)*x1598))+x1601+x1600)))+(IKabs(((-2.2)+(((-1.0)*x1599))+(((0.84)*r01*x1570))+x1602+(((0.84)*r00*x1574))+(((0.84)*cj4*r02)))))+(IKabs(((-2.2)+(((-1.0)*x1604))+x1603)))+(IKabs(((2.2)+(((-1.0)*x1598))+x1601+x1600)))+(IKabs(((2.2)+(((-1.0)*x1604))+x1603)))+(IKabs(((2.2)+((x1572*x1579))+(((-1.0)*x1575*x1576))+(((-1.0)*x1602))+x1599+(((-1.0)*x1579*x1580))+((cj4*x1575*x1577))+((cj4*x1575*x1578))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1605=(cj5*r20);
IkReal x1606=(cj4*r22);
IkReal x1607=(r21*sj5);
IkReal x1608=((2.814)*sj4);
IkReal x1609=(r20*sj5);
IkReal x1610=(cj5*r21);
IkReal x1611=((2.52)*sj4);
IkReal x1612=(r00*sj5);
IkReal x1613=(cj4*r02);
IkReal x1614=(cj5*r01);
IkReal x1615=((8.442)*sj4);
IkReal x1616=((0.84)*sj4);
IkReal x1617=((2.52)*x1613);
IkReal x1618=((8.442)*x1606);
IkReal x1619=((0.06)*x1607);
IkReal x1620=((2.814)*x1606);
IkReal x1621=((0.02)*x1607);
IkReal x1622=((0.84)*x1613);
IkReal x1623=(x1609*x1615);
IkReal x1624=(x1610*x1615);
IkReal x1625=(x1611*x1614);
IkReal x1626=(x1611*x1612);
IkReal x1627=(x1608*x1610);
IkReal x1628=(x1612*x1616);
IkReal x1629=(x1614*x1616);
IkReal x1630=(x1608*x1609);
IkReal x1631=((((12.0)*pz))+(((0.06)*x1605)));
IkReal x1632=((((4.0)*pz))+(((0.02)*x1605)));
IkReal x1633=(x1623+x1626+x1625+x1624+x1618+x1619+x1617);
IkReal x1634=(x1622+x1621+x1620+x1627+x1629+x1628+x1630);
op[0]=((-2.2)+x1634+(((-1.0)*x1632)));
op[1]=0;
op[2]=((-2.2)+x1633+(((-1.0)*x1631)));
op[3]=0;
op[4]=((2.2)+x1633+(((-1.0)*x1631)));
op[5]=0;
op[6]=((2.2)+x1634+(((-1.0)*x1632)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1635=((4.0)*pz);
IkReal x1636=((12.0)*pz);
IkReal x1637=(r20*sj5);
IkReal x1638=((0.84)*cj3);
IkReal x1639=((8.442)*sj4);
IkReal x1640=(cj5*r20);
IkReal x1641=(r22*sj4);
IkReal x1642=((2.52)*sj3);
IkReal x1643=(cj5*r21);
IkReal x1644=((2.814)*sj4);
IkReal x1645=((0.84)*sj3);
IkReal x1646=(r21*sj5);
IkReal x1647=(cj4*r22);
IkReal x1648=((0.02)*x1640);
IkReal x1649=((0.06)*x1640);
IkReal x1650=((2.52)*cj3*cj4);
IkReal x1651=(x1640*x1645);
IkReal x1652=(x1640*x1642);
IkReal x1653=(cj4*x1637*x1638);
IkReal x1654=(cj4*x1638*x1643);
IkReal x1655=(x1643*x1650);
IkReal x1656=(x1637*x1650);
IkReal x1657=(x1653+x1651+x1654+x1648+x1635);
IkReal x1658=(x1652+x1656+x1655+x1649+x1636);
IkReal x1659=(((x1637*x1639))+(((8.442)*x1647))+((x1642*x1646))+((x1639*x1643))+(((2.52)*cj3*x1641))+(((0.06)*x1646)));
IkReal x1660=(((x1637*x1644))+((x1645*x1646))+(((0.02)*x1646))+(((2.814)*x1647))+((x1643*x1644))+((x1638*x1641)));
j1evalpoly[0]=((-2.2)+x1657+(((htj1*htj1*htj1*htj1)*(((2.2)+x1658+(((-1.0)*x1659))))))+(((htj1*htj1)*(((-2.2)+x1658+(((-1.0)*x1659))))))+(((-1.0)*x1660))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((2.2)+x1657+(((-1.0)*x1660)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1661=((1.0)*sj1);
IkReal x1662=(sj4*sj5);
IkReal x1663=(cj4*r22);
IkReal x1664=(cj5*sj4);
IkReal x1665=(cj4*r02);
IkReal x1666=((1.0)*cj1);
if( IKabs(((((-1.0)*r01*x1664*x1666))+(((-1.0)*x1661*x1663))+(((-1.0)*r00*x1662*x1666))+(((-1.0)*r21*x1661*x1664))+(((-1.0)*x1665*x1666))+(((-1.0)*r20*x1661*x1662)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r21*x1664))+(((-1.0)*x1661*x1665))+((cj1*x1663))+((cj1*r20*x1662))+(((-1.0)*r01*x1661*x1664))+(((-1.0)*r00*x1661*x1662)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1664*x1666))+(((-1.0)*x1661*x1663))+(((-1.0)*r00*x1662*x1666))+(((-1.0)*r21*x1661*x1664))+(((-1.0)*x1665*x1666))+(((-1.0)*r20*x1661*x1662))))+IKsqr((((cj1*r21*x1664))+(((-1.0)*x1661*x1665))+((cj1*x1663))+((cj1*r20*x1662))+(((-1.0)*r01*x1661*x1664))+(((-1.0)*r00*x1661*x1662))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x1664*x1666))+(((-1.0)*x1661*x1663))+(((-1.0)*r00*x1662*x1666))+(((-1.0)*r21*x1661*x1664))+(((-1.0)*x1665*x1666))+(((-1.0)*r20*x1661*x1662))), (((cj1*r21*x1664))+(((-1.0)*x1661*x1665))+((cj1*x1663))+((cj1*r20*x1662))+(((-1.0)*r01*x1661*x1664))+(((-1.0)*r00*x1661*x1662))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1667=IKcos(j2);
IkReal x1668=IKsin(j2);
IkReal x1669=(cj3*sj4);
IkReal x1670=((1.0)*cj5);
IkReal x1671=(cj3*cj4);
IkReal x1672=(r21*sj5);
IkReal x1673=((0.005)*cj5);
IkReal x1674=((1.0)*cj4);
IkReal x1675=(r01*sj5);
IkReal x1676=(cj1*x1667);
IkReal x1677=(sj1*x1668);
IkReal x1678=(cj1*x1668);
IkReal x1679=(sj1*x1667);
IkReal x1680=((1.0)*r20*sj5);
IkReal x1681=((1.0)*r00*sj5);
IkReal x1682=((1.0)*x1677);
evalcond[0]=((((-1.0)*x1682))+x1676+(((-1.0)*sj4*x1680))+(((-1.0)*r21*sj4*x1670))+(((-1.0)*r22*x1674)));
evalcond[1]=((((-1.0)*r02*x1674))+(((-1.0)*x1678))+(((-1.0)*x1679))+(((-1.0)*r01*sj4*x1670))+(((-1.0)*sj4*x1681)));
evalcond[2]=(x1678+x1679+(((-1.0)*r21*x1670*x1671))+((sj3*x1672))+(((-1.0)*r20*sj3*x1670))+(((-1.0)*x1671*x1680))+((r22*x1669)));
evalcond[3]=((((-1.0)*x1682))+x1676+((r02*x1669))+(((-1.0)*r00*sj3*x1670))+(((-1.0)*r01*x1670*x1671))+((sj3*x1675))+(((-1.0)*x1671*x1681)));
evalcond[4]=((((-0.21)*x1679))+(((-0.21)*x1678))+(((-0.7035)*x1677))+(((-1.0)*pz))+(((0.7035)*x1676))+(((0.005)*x1672))+(((0.55)*cj1))+(((-1.0)*r20*x1673)));
evalcond[5]=((0.165)+(((-0.21)*x1676))+(((0.21)*x1677))+(((-0.7035)*x1679))+(((-0.7035)*x1678))+(((-1.0)*px))+(((0.005)*x1675))+(((-1.0)*r00*x1673))+(((-0.55)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1683=((1.0)*sj4);
IkReal x1684=(cj5*sj0);
IkReal x1685=(cj0*sj5);
IkReal x1686=(sj0*sj5);
IkReal x1687=((1.0)*cj4);
IkReal x1688=(cj0*cj5);
CheckValue<IkReal> x1689=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj5*x1683))+(((-1.0)*cj5*r21*x1683))+(((-1.0)*r22*x1687)))),-1);
if(!x1689.valid){
continue;
}
CheckValue<IkReal> x1690 = IKatan2WithCheck(IkReal((((r11*x1685))+((r00*x1684))+(((-1.0)*r01*x1686))+(((-1.0)*r10*x1688)))),IkReal(((((-1.0)*r11*x1687*x1688))+((cj0*r12*sj4))+((cj4*r01*x1684))+(((-1.0)*r02*sj0*x1683))+((cj4*r00*x1686))+(((-1.0)*r10*x1685*x1687)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1690.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1689.value)))+(x1690.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1691=IKsin(j3);
IkReal x1692=IKcos(j3);
IkReal x1693=(sj5*x1692);
IkReal x1694=(cj4*cj5*x1691);
IkReal x1695=(cj4*sj5*x1691);
IkReal x1696=((1.0)*cj5*x1692);
IkReal x1697=((1.0)*sj4*x1691);
evalcond[0]=(((r20*x1695))+((r21*x1693))+((r21*x1694))+(((-1.0)*r20*x1696))+(((-1.0)*r22*x1697)));
evalcond[1]=(((r01*x1693))+((r01*x1694))+((r00*x1695))+cj0+(((-1.0)*r02*x1697))+(((-1.0)*r00*x1696)));
evalcond[2]=(sj0+((r10*x1695))+(((-1.0)*r12*x1697))+((r11*x1693))+((r11*x1694))+(((-1.0)*r10*x1696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x1698=((2.2)*cj0);
IkReal x1699=((2.2)*sj0);
IkReal x1700=((2.52)*cj4);
IkReal x1701=(cj5*sj4);
IkReal x1702=(sj4*sj5);
IkReal x1703=(r20*sj0);
IkReal x1704=((0.02)*cj5);
IkReal x1705=(cj4*r22);
IkReal x1706=((2.814)*cj0);
IkReal x1707=((0.84)*cj4);
IkReal x1708=((8.442)*sj0);
IkReal x1709=((8.442)*cj0);
IkReal x1710=((2.814)*sj0);
IkReal x1711=(cj0*r20);
IkReal x1712=((0.06)*cj5);
IkReal x1713=(pz*sj0);
IkReal x1714=(cj0*pz);
IkReal x1715=(r02*x1700);
IkReal x1716=((12.0)*x1713);
IkReal x1717=(r12*x1700);
IkReal x1718=((12.0)*x1714);
IkReal x1719=(cj0*r21*sj5);
IkReal x1720=(r21*sj0*sj5);
IkReal x1721=(x1703*x1712);
IkReal x1722=((2.52)*r01*x1701);
IkReal x1723=((2.52)*r00*x1702);
IkReal x1724=(x1705*x1708);
IkReal x1725=((0.06)*x1720);
IkReal x1726=((0.06)*x1719);
IkReal x1727=((2.52)*r10*x1702);
IkReal x1728=((2.52)*r11*x1701);
IkReal x1729=(x1705*x1709);
IkReal x1730=(x1711*x1712);
IkReal x1731=(r21*x1701*x1708);
IkReal x1732=((8.442)*x1702*x1703);
IkReal x1733=(r20*x1702*x1709);
IkReal x1734=(r21*x1701*x1709);
IkReal x1735=(x1730+x1718);
IkReal x1736=(x1724+x1725+x1731+x1732);
IkReal x1737=(x1722+x1723+x1721+x1716+x1715);
IkReal x1738=(x1728+x1729+x1726+x1727+x1733+x1734+x1717);
j1eval[0]=((IKabs((x1737+x1699+(((-1.0)*x1736)))))+(IKabs((((r02*x1707))+(((-2.814)*x1702*x1703))+x1699+((x1703*x1704))+(((0.84)*r01*x1701))+(((4.0)*x1713))+(((-1.0)*x1705*x1710))+(((-0.02)*x1720))+(((0.84)*r00*x1702))+(((-1.0)*r21*x1701*x1710)))))+(IKabs(((((-1.0)*x1699))+x1737+(((-1.0)*x1736)))))+(IKabs((((r12*x1707))+((r21*x1701*x1706))+((r20*x1702*x1706))+(((0.84)*r11*x1701))+(((-1.0)*x1698))+(((0.84)*r10*x1702))+(((0.02)*x1719))+(((-4.0)*x1714))+((x1705*x1706))+(((-1.0)*x1704*x1711)))))+(IKabs((x1738+x1698+(((-1.0)*x1735)))))+(IKabs(((((-1.0)*x1698))+x1738+(((-1.0)*x1735))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1739=((2.2)*sj0);
IkReal x1740=(sj0*sj5);
IkReal x1741=((8.442)*sj4);
IkReal x1742=((2.814)*sj4);
IkReal x1743=(pz*sj0);
IkReal x1744=(cj4*r02);
IkReal x1745=((2.52)*sj4);
IkReal x1746=(r00*sj5);
IkReal x1747=(cj5*r01);
IkReal x1748=((0.84)*sj4);
IkReal x1749=((2.52)*x1744);
IkReal x1750=((12.0)*x1743);
IkReal x1751=((4.0)*x1743);
IkReal x1752=((0.84)*x1744);
IkReal x1753=(cj5*r21*sj0);
IkReal x1754=(cj4*r22*sj0);
IkReal x1755=(cj5*r20*sj0);
IkReal x1756=((0.06)*x1755);
IkReal x1757=(x1745*x1747);
IkReal x1758=(x1745*x1746);
IkReal x1759=((8.442)*x1754);
IkReal x1760=((0.06)*r21*x1740);
IkReal x1761=((0.02)*x1755);
IkReal x1762=(x1746*x1748);
IkReal x1763=(x1747*x1748);
IkReal x1764=((2.814)*x1754);
IkReal x1765=((0.02)*r21*x1740);
IkReal x1766=(x1741*x1753);
IkReal x1767=(r20*x1740*x1741);
IkReal x1768=(r20*x1740*x1742);
IkReal x1769=(x1742*x1753);
IkReal x1770=(x1762+x1763+x1761+x1752+x1751);
IkReal x1771=(x1760+x1766+x1767+x1759);
IkReal x1772=(x1768+x1769+x1764+x1765);
IkReal x1773=(x1749+x1758+x1757+x1756+x1750);
op[0]=(x1739+x1770+(((-1.0)*x1772)));
op[1]=0;
op[2]=(x1739+x1773+(((-1.0)*x1771)));
op[3]=0;
op[4]=(x1773+(((-1.0)*x1771))+(((-1.0)*x1739)));
op[5]=0;
op[6]=(x1770+(((-1.0)*x1772))+(((-1.0)*x1739)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1774=((2.2)*cj0);
IkReal x1775=(cj5*sj4);
IkReal x1776=(cj4*r12);
IkReal x1777=(cj0*pz);
IkReal x1778=(cj0*r21);
IkReal x1779=(cj0*r20);
IkReal x1780=(sj4*sj5);
IkReal x1781=((2.52)*x1776);
IkReal x1782=((12.0)*x1777);
IkReal x1783=((0.84)*x1776);
IkReal x1784=((4.0)*x1777);
IkReal x1785=(cj0*cj4*r22);
IkReal x1786=(sj5*x1778);
IkReal x1787=((2.814)*x1785);
IkReal x1788=((0.06)*x1786);
IkReal x1789=((2.52)*r10*x1780);
IkReal x1790=((2.52)*r11*x1775);
IkReal x1791=((8.442)*x1785);
IkReal x1792=((0.06)*cj5*x1779);
IkReal x1793=((0.02)*x1786);
IkReal x1794=((0.84)*r11*x1775);
IkReal x1795=((0.84)*r10*x1780);
IkReal x1796=((0.02)*cj5*x1779);
IkReal x1797=((2.814)*x1775*x1778);
IkReal x1798=((8.442)*x1779*x1780);
IkReal x1799=((8.442)*x1775*x1778);
IkReal x1800=((2.814)*x1779*x1780);
IkReal x1801=(x1784+x1796);
IkReal x1802=(x1782+x1792);
IkReal x1803=(x1788+x1789+x1781+x1799+x1798+x1791+x1790);
IkReal x1804=(x1783+x1787+x1793+x1797+x1795+x1794+x1800);
j1evalpoly[0]=((((htj1*htj1)*((x1774+(((-1.0)*x1802))+x1803))))+x1774+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x1801))+(((-1.0)*x1774))+x1804))))+(((-1.0)*x1801))+x1804+(((htj1*htj1*htj1*htj1)*(((((-1.0)*x1802))+(((-1.0)*x1774))+x1803)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1805=((1.0)*sj4);
IkReal x1806=(r20*sj5);
IkReal x1807=(cj1*cj3);
IkReal x1808=(cj5*r21);
IkReal x1809=(cj4*sj1);
IkReal x1810=(cj1*sj3);
IkReal x1811=(cj5*r20);
IkReal x1812=(cj1*sj4);
IkReal x1813=(sj1*sj3);
IkReal x1814=((1.0)*r21*sj5);
if( IKabs(((((-1.0)*r22*x1809))+(((-1.0)*sj1*x1805*x1806))+(((-1.0)*sj1*x1805*x1808))+(((-1.0)*x1810*x1814))+((cj4*x1806*x1807))+(((-1.0)*r22*x1805*x1807))+((cj4*x1807*x1808))+((x1810*x1811)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+(((-1.0)*x1813*x1814))+((cj3*x1808*x1809))+(((-1.0)*cj3*r22*sj1*x1805))+((x1808*x1812))+((x1811*x1813))+((x1806*x1812))+((cj3*x1806*x1809)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x1809))+(((-1.0)*sj1*x1805*x1806))+(((-1.0)*sj1*x1805*x1808))+(((-1.0)*x1810*x1814))+((cj4*x1806*x1807))+(((-1.0)*r22*x1805*x1807))+((cj4*x1807*x1808))+((x1810*x1811))))+IKsqr((((cj1*cj4*r22))+(((-1.0)*x1813*x1814))+((cj3*x1808*x1809))+(((-1.0)*cj3*r22*sj1*x1805))+((x1808*x1812))+((x1811*x1813))+((x1806*x1812))+((cj3*x1806*x1809))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x1809))+(((-1.0)*sj1*x1805*x1806))+(((-1.0)*sj1*x1805*x1808))+(((-1.0)*x1810*x1814))+((cj4*x1806*x1807))+(((-1.0)*r22*x1805*x1807))+((cj4*x1807*x1808))+((x1810*x1811))), (((cj1*cj4*r22))+(((-1.0)*x1813*x1814))+((cj3*x1808*x1809))+(((-1.0)*cj3*r22*sj1*x1805))+((x1808*x1812))+((x1811*x1813))+((x1806*x1812))+((cj3*x1806*x1809))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1815=IKsin(j2);
IkReal x1816=IKcos(j2);
IkReal x1817=(cj3*sj4);
IkReal x1818=((1.0)*cj5);
IkReal x1819=((0.21)*cj0);
IkReal x1820=(sj3*sj5);
IkReal x1821=(cj3*cj4);
IkReal x1822=((0.21)*sj0);
IkReal x1823=((1.0)*cj0);
IkReal x1824=((1.0)*sj5);
IkReal x1825=((1.0)*cj4);
IkReal x1826=((0.7035)*sj0);
IkReal x1827=((0.7035)*cj0);
IkReal x1828=((0.005)*sj5);
IkReal x1829=((0.005)*cj5);
IkReal x1830=((0.55)*sj1);
IkReal x1831=(cj1*x1816);
IkReal x1832=(sj1*x1815);
IkReal x1833=(cj1*x1815);
IkReal x1834=(sj1*x1816);
evalcond[0]=((((-1.0)*r21*sj4*x1818))+(((-1.0)*x1832))+(((-1.0)*r20*sj4*x1824))+(((-1.0)*r22*x1825))+x1831);
evalcond[1]=(((sj0*x1833))+((sj0*x1834))+(((-1.0)*r02*x1825))+(((-1.0)*r01*sj4*x1818))+(((-1.0)*r00*sj4*x1824)));
evalcond[2]=((((-1.0)*r10*sj4*x1824))+(((-1.0)*r12*x1825))+(((-1.0)*x1823*x1833))+(((-1.0)*x1823*x1834))+(((-1.0)*r11*sj4*x1818)));
evalcond[3]=((((-1.0)*r20*sj3*x1818))+((r22*x1817))+(((-1.0)*r20*x1821*x1824))+(((-1.0)*r21*x1818*x1821))+x1833+x1834+((r21*x1820)));
evalcond[4]=((((-0.21)*x1834))+(((-0.21)*x1833))+(((-0.7035)*x1832))+(((0.7035)*x1831))+(((-1.0)*pz))+(((0.55)*cj1))+((r21*x1828))+(((-1.0)*r20*x1829)));
evalcond[5]=(((r02*x1817))+(((-1.0)*r00*x1821*x1824))+(((-1.0)*r00*sj3*x1818))+(((-1.0)*r01*x1818*x1821))+((sj0*x1832))+((r01*x1820))+(((-1.0)*sj0*x1831)));
evalcond[6]=(((cj0*x1831))+(((-1.0)*r11*x1818*x1821))+(((-1.0)*r10*x1821*x1824))+(((-1.0)*x1823*x1832))+((r11*x1820))+(((-1.0)*r10*sj3*x1818))+((r12*x1817)));
evalcond[7]=(((x1826*x1834))+((x1826*x1833))+((sj0*x1830))+((r01*x1828))+((x1822*x1831))+(((0.006)*cj0))+(((-1.0)*px))+(((-1.0)*r00*x1829))+(((-1.0)*x1822*x1832))+(((-0.165)*sj0)));
evalcond[8]=((((-1.0)*cj0*x1830))+(((-1.0)*py))+(((-1.0)*x1819*x1831))+(((-1.0)*x1827*x1834))+(((-1.0)*x1827*x1833))+(((0.165)*cj0))+((x1819*x1832))+((r11*x1828))+(((0.006)*sj0))+(((-1.0)*r10*x1829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1835=((1.0)*sj4);
IkReal x1836=(r21*sj0);
IkReal x1837=((1.0)*cj4);
IkReal x1838=((1.0)*r20*sj0);
CheckValue<IkReal> x1839=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x1835))+(((-1.0)*cj5*r01*x1835))+(((-1.0)*r02*x1837)))),-1);
if(!x1839.valid){
continue;
}
CheckValue<IkReal> x1840 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x1838))+((sj5*x1836)))),IkReal(((((-1.0)*cj5*x1836*x1837))+((r22*sj0*sj4))+(((-1.0)*r20*sj0*sj5*x1837)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1840.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1839.value)))+(x1840.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1841=IKsin(j3);
IkReal x1842=IKcos(j3);
IkReal x1843=(sj5*x1842);
IkReal x1844=(cj4*cj5*x1841);
IkReal x1845=(cj4*sj5*x1841);
IkReal x1846=((1.0)*cj5*x1842);
IkReal x1847=((1.0)*sj4*x1841);
evalcond[0]=((((-1.0)*r22*x1847))+((r20*x1845))+(((-1.0)*r20*x1846))+((r21*x1844))+((r21*x1843)));
evalcond[1]=(cj0+(((-1.0)*r00*x1846))+(((-1.0)*r02*x1847))+((r00*x1845))+((r01*x1844))+((r01*x1843)));
evalcond[2]=(sj0+(((-1.0)*r10*x1846))+((r10*x1845))+(((-1.0)*r12*x1847))+((r11*x1843))+((r11*x1844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x1848=((2.2)*cj0);
IkReal x1849=((2.2)*sj0);
IkReal x1850=((2.52)*cj4);
IkReal x1851=(cj5*sj4);
IkReal x1852=(sj4*sj5);
IkReal x1853=(r20*sj0);
IkReal x1854=((0.02)*cj5);
IkReal x1855=(cj4*r22);
IkReal x1856=((2.814)*cj0);
IkReal x1857=((0.84)*cj4);
IkReal x1858=((8.442)*sj0);
IkReal x1859=((8.442)*cj0);
IkReal x1860=((2.814)*sj0);
IkReal x1861=(cj0*r20);
IkReal x1862=((0.06)*cj5);
IkReal x1863=(pz*sj0);
IkReal x1864=(cj0*pz);
IkReal x1865=(r02*x1850);
IkReal x1866=((12.0)*x1863);
IkReal x1867=(r12*x1850);
IkReal x1868=((12.0)*x1864);
IkReal x1869=(cj0*r21*sj5);
IkReal x1870=(r21*sj0*sj5);
IkReal x1871=(x1853*x1862);
IkReal x1872=((2.52)*r01*x1851);
IkReal x1873=((2.52)*r00*x1852);
IkReal x1874=(x1855*x1858);
IkReal x1875=((0.06)*x1870);
IkReal x1876=((0.06)*x1869);
IkReal x1877=((2.52)*r10*x1852);
IkReal x1878=((2.52)*r11*x1851);
IkReal x1879=(x1855*x1859);
IkReal x1880=(x1861*x1862);
IkReal x1881=(r21*x1851*x1858);
IkReal x1882=((8.442)*x1852*x1853);
IkReal x1883=(r20*x1852*x1859);
IkReal x1884=(r21*x1851*x1859);
IkReal x1885=(x1868+x1880);
IkReal x1886=(x1874+x1875+x1882+x1881);
IkReal x1887=(x1865+x1866+x1872+x1873+x1871);
IkReal x1888=(x1867+x1876+x1877+x1878+x1879+x1884+x1883);
j1eval[0]=((IKabs((x1849+x1887+(((-1.0)*x1886)))))+(IKabs(((((-1.0)*x1849))+x1887+(((-1.0)*x1886)))))+(IKabs((x1848+x1888+(((-1.0)*x1885)))))+(IKabs(((((0.84)*r10*x1852))+(((-1.0)*x1848))+(((0.84)*r11*x1851))+(((-1.0)*x1854*x1861))+((x1855*x1856))+(((-4.0)*x1864))+((r21*x1851*x1856))+((r20*x1852*x1856))+(((0.02)*x1869))+((r12*x1857)))))+(IKabs(((((-1.0)*x1848))+x1888+(((-1.0)*x1885)))))+(IKabs(((((-1.0)*r21*x1851*x1860))+(((-1.0)*x1855*x1860))+(((-0.02)*x1870))+(((0.84)*r00*x1852))+(((4.0)*x1863))+(((-2.814)*x1852*x1853))+(((0.84)*r01*x1851))+((r02*x1857))+((x1853*x1854))+x1849))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1889=((2.2)*sj0);
IkReal x1890=(sj0*sj5);
IkReal x1891=((8.442)*sj4);
IkReal x1892=((2.814)*sj4);
IkReal x1893=(pz*sj0);
IkReal x1894=(cj4*r02);
IkReal x1895=((2.52)*sj4);
IkReal x1896=(r00*sj5);
IkReal x1897=(cj5*r01);
IkReal x1898=((0.84)*sj4);
IkReal x1899=((2.52)*x1894);
IkReal x1900=((12.0)*x1893);
IkReal x1901=((4.0)*x1893);
IkReal x1902=((0.84)*x1894);
IkReal x1903=(cj5*r21*sj0);
IkReal x1904=(cj4*r22*sj0);
IkReal x1905=(cj5*r20*sj0);
IkReal x1906=((0.06)*x1905);
IkReal x1907=(x1895*x1897);
IkReal x1908=(x1895*x1896);
IkReal x1909=((8.442)*x1904);
IkReal x1910=((0.06)*r21*x1890);
IkReal x1911=((0.02)*x1905);
IkReal x1912=(x1896*x1898);
IkReal x1913=(x1897*x1898);
IkReal x1914=((2.814)*x1904);
IkReal x1915=((0.02)*r21*x1890);
IkReal x1916=(x1891*x1903);
IkReal x1917=(r20*x1890*x1891);
IkReal x1918=(r20*x1890*x1892);
IkReal x1919=(x1892*x1903);
IkReal x1920=(x1902+x1901+x1911+x1913+x1912);
IkReal x1921=(x1909+x1910+x1917+x1916);
IkReal x1922=(x1919+x1918+x1915+x1914);
IkReal x1923=(x1908+x1906+x1907+x1900+x1899);
op[0]=((((-1.0)*x1922))+x1920+x1889);
op[1]=0;
op[2]=((((-1.0)*x1921))+x1923+x1889);
op[3]=0;
op[4]=((((-1.0)*x1921))+x1923+(((-1.0)*x1889)));
op[5]=0;
op[6]=((((-1.0)*x1922))+x1920+(((-1.0)*x1889)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1924=((2.2)*cj0);
IkReal x1925=(cj5*sj4);
IkReal x1926=(cj4*r12);
IkReal x1927=(cj0*pz);
IkReal x1928=(cj0*r21);
IkReal x1929=(cj0*r20);
IkReal x1930=(sj4*sj5);
IkReal x1931=((2.52)*x1926);
IkReal x1932=((12.0)*x1927);
IkReal x1933=((0.84)*x1926);
IkReal x1934=((4.0)*x1927);
IkReal x1935=(cj0*cj4*r22);
IkReal x1936=(sj5*x1928);
IkReal x1937=((2.814)*x1935);
IkReal x1938=((0.06)*x1936);
IkReal x1939=((2.52)*r10*x1930);
IkReal x1940=((2.52)*r11*x1925);
IkReal x1941=((8.442)*x1935);
IkReal x1942=((0.06)*cj5*x1929);
IkReal x1943=((0.02)*x1936);
IkReal x1944=((0.84)*r11*x1925);
IkReal x1945=((0.84)*r10*x1930);
IkReal x1946=((0.02)*cj5*x1929);
IkReal x1947=((2.814)*x1925*x1928);
IkReal x1948=((8.442)*x1929*x1930);
IkReal x1949=((8.442)*x1925*x1928);
IkReal x1950=((2.814)*x1929*x1930);
IkReal x1951=(x1934+x1946);
IkReal x1952=(x1932+x1942);
IkReal x1953=(x1931+x1939+x1938+x1948+x1949+x1940+x1941);
IkReal x1954=(x1933+x1937+x1943+x1947+x1944+x1945+x1950);
j1evalpoly[0]=((((htj1*htj1)*(((((-1.0)*x1952))+x1924+x1953))))+(((-1.0)*x1951))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x1951))+(((-1.0)*x1924))+x1954))))+x1924+x1954+(((htj1*htj1*htj1*htj1)*(((((-1.0)*x1952))+(((-1.0)*x1924))+x1953)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1955=((1.0)*sj4);
IkReal x1956=(r20*sj5);
IkReal x1957=(cj1*cj3);
IkReal x1958=(cj5*r21);
IkReal x1959=(cj4*sj1);
IkReal x1960=(cj1*sj3);
IkReal x1961=(cj5*r20);
IkReal x1962=(cj1*sj4);
IkReal x1963=(sj1*sj3);
IkReal x1964=((1.0)*r21*sj5);
if( IKabs(((((-1.0)*sj1*x1955*x1956))+(((-1.0)*sj1*x1955*x1958))+(((-1.0)*r22*x1955*x1957))+(((-1.0)*x1960*x1964))+((x1960*x1961))+(((-1.0)*r22*x1959))+((cj4*x1956*x1957))+((cj4*x1957*x1958)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+((x1958*x1962))+((x1956*x1962))+((cj3*x1956*x1959))+((cj3*x1958*x1959))+(((-1.0)*cj3*r22*sj1*x1955))+((x1961*x1963))+(((-1.0)*x1963*x1964)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x1955*x1956))+(((-1.0)*sj1*x1955*x1958))+(((-1.0)*r22*x1955*x1957))+(((-1.0)*x1960*x1964))+((x1960*x1961))+(((-1.0)*r22*x1959))+((cj4*x1956*x1957))+((cj4*x1957*x1958))))+IKsqr((((cj1*cj4*r22))+((x1958*x1962))+((x1956*x1962))+((cj3*x1956*x1959))+((cj3*x1958*x1959))+(((-1.0)*cj3*r22*sj1*x1955))+((x1961*x1963))+(((-1.0)*x1963*x1964))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj1*x1955*x1956))+(((-1.0)*sj1*x1955*x1958))+(((-1.0)*r22*x1955*x1957))+(((-1.0)*x1960*x1964))+((x1960*x1961))+(((-1.0)*r22*x1959))+((cj4*x1956*x1957))+((cj4*x1957*x1958))), (((cj1*cj4*r22))+((x1958*x1962))+((x1956*x1962))+((cj3*x1956*x1959))+((cj3*x1958*x1959))+(((-1.0)*cj3*r22*sj1*x1955))+((x1961*x1963))+(((-1.0)*x1963*x1964))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1965=IKsin(j2);
IkReal x1966=IKcos(j2);
IkReal x1967=(cj3*sj4);
IkReal x1968=((1.0)*cj5);
IkReal x1969=((0.21)*cj0);
IkReal x1970=(sj3*sj5);
IkReal x1971=(cj3*cj4);
IkReal x1972=((0.21)*sj0);
IkReal x1973=((1.0)*cj0);
IkReal x1974=((1.0)*sj5);
IkReal x1975=((1.0)*cj4);
IkReal x1976=((0.7035)*sj0);
IkReal x1977=((0.7035)*cj0);
IkReal x1978=((0.005)*sj5);
IkReal x1979=((0.005)*cj5);
IkReal x1980=((0.55)*sj1);
IkReal x1981=(cj1*x1966);
IkReal x1982=(sj1*x1965);
IkReal x1983=(cj1*x1965);
IkReal x1984=(sj1*x1966);
evalcond[0]=((((-1.0)*r20*sj4*x1974))+(((-1.0)*r21*sj4*x1968))+(((-1.0)*r22*x1975))+x1981+(((-1.0)*x1982)));
evalcond[1]=((((-1.0)*r01*sj4*x1968))+(((-1.0)*r02*x1975))+(((-1.0)*r00*sj4*x1974))+((sj0*x1983))+((sj0*x1984)));
evalcond[2]=((((-1.0)*r10*sj4*x1974))+(((-1.0)*r11*sj4*x1968))+(((-1.0)*x1973*x1983))+(((-1.0)*x1973*x1984))+(((-1.0)*r12*x1975)));
evalcond[3]=(((r21*x1970))+x1984+x1983+(((-1.0)*r20*sj3*x1968))+((r22*x1967))+(((-1.0)*r21*x1968*x1971))+(((-1.0)*r20*x1971*x1974)));
evalcond[4]=((((-0.21)*x1983))+(((-0.21)*x1984))+(((-0.7035)*x1982))+((r21*x1978))+(((-1.0)*pz))+(((0.55)*cj1))+(((0.7035)*x1981))+(((-1.0)*r20*x1979)));
evalcond[5]=(((r02*x1967))+(((-1.0)*sj0*x1981))+((sj0*x1982))+((r01*x1970))+(((-1.0)*r00*x1971*x1974))+(((-1.0)*r01*x1968*x1971))+(((-1.0)*r00*sj3*x1968)));
evalcond[6]=(((r12*x1967))+((r11*x1970))+(((-1.0)*x1973*x1982))+(((-1.0)*r11*x1968*x1971))+(((-1.0)*r10*sj3*x1968))+(((-1.0)*r10*x1971*x1974))+((cj0*x1981)));
evalcond[7]=(((x1972*x1981))+((x1976*x1984))+((x1976*x1983))+(((-1.0)*x1972*x1982))+((sj0*x1980))+(((-1.0)*r00*x1979))+(((0.006)*cj0))+(((-1.0)*px))+((r01*x1978))+(((-0.165)*sj0)));
evalcond[8]=(((x1969*x1982))+(((-1.0)*cj0*x1980))+((r11*x1978))+(((-1.0)*py))+(((-1.0)*r10*x1979))+(((0.165)*cj0))+(((-1.0)*x1977*x1983))+(((-1.0)*x1977*x1984))+(((0.006)*sj0))+(((-1.0)*x1969*x1981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1985=(cj0*r21);
IkReal x1986=((1.0)*cj5);
IkReal x1987=(cj0*r20);
CheckValue<IkReal> x1988 = IKatan2WithCheck(IkReal(((((-1.0)*x1986*x1987))+((sj5*x1985)))),IkReal(((((-1.0)*cj4*x1985*x1986))+((cj0*r22*sj4))+(((-1.0)*cj4*sj5*x1987)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1988.valid){
continue;
}
CheckValue<IkReal> x1989=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj4))+((r10*sj4*sj5))+((cj4*r12)))),-1);
if(!x1989.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1988.value)+(((1.5707963267949)*(x1989.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1990=IKsin(j3);
IkReal x1991=IKcos(j3);
IkReal x1992=(sj5*x1991);
IkReal x1993=(cj4*cj5*x1990);
IkReal x1994=(cj4*sj5*x1990);
IkReal x1995=((1.0)*cj5*x1991);
IkReal x1996=((1.0)*sj4*x1990);
evalcond[0]=(((r21*x1993))+((r21*x1992))+((r20*x1994))+(((-1.0)*r22*x1996))+(((-1.0)*r20*x1995)));
evalcond[1]=(cj0+(((-1.0)*r00*x1995))+(((-1.0)*r02*x1996))+((r00*x1994))+((r01*x1993))+((r01*x1992)));
evalcond[2]=((((-1.0)*r10*x1995))+sj0+((r11*x1992))+((r11*x1993))+((r10*x1994))+(((-1.0)*r12*x1996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x1997=((2.2)*cj0);
IkReal x1998=((2.2)*sj0);
IkReal x1999=((2.52)*cj4);
IkReal x2000=(cj5*sj4);
IkReal x2001=(sj4*sj5);
IkReal x2002=(r20*sj0);
IkReal x2003=((0.02)*cj5);
IkReal x2004=(cj4*r22);
IkReal x2005=((2.814)*cj0);
IkReal x2006=((0.84)*cj4);
IkReal x2007=((8.442)*sj0);
IkReal x2008=((8.442)*cj0);
IkReal x2009=((2.814)*sj0);
IkReal x2010=(cj0*r20);
IkReal x2011=((0.06)*cj5);
IkReal x2012=(pz*sj0);
IkReal x2013=(cj0*pz);
IkReal x2014=(r02*x1999);
IkReal x2015=((12.0)*x2012);
IkReal x2016=(r12*x1999);
IkReal x2017=((12.0)*x2013);
IkReal x2018=(cj0*r21*sj5);
IkReal x2019=(r21*sj0*sj5);
IkReal x2020=(x2002*x2011);
IkReal x2021=((2.52)*r01*x2000);
IkReal x2022=((2.52)*r00*x2001);
IkReal x2023=(x2004*x2007);
IkReal x2024=((0.06)*x2019);
IkReal x2025=((0.06)*x2018);
IkReal x2026=((2.52)*r10*x2001);
IkReal x2027=((2.52)*r11*x2000);
IkReal x2028=(x2004*x2008);
IkReal x2029=(x2010*x2011);
IkReal x2030=(r21*x2000*x2007);
IkReal x2031=((8.442)*x2001*x2002);
IkReal x2032=(r20*x2001*x2008);
IkReal x2033=(r21*x2000*x2008);
IkReal x2034=(x2029+x2017);
IkReal x2035=(x2024+x2023+x2031+x2030);
IkReal x2036=(x2020+x2021+x2022+x2015+x2014);
IkReal x2037=(x2025+x2026+x2027+x2028+x2033+x2032+x2016);
j1eval[0]=((IKabs((x2036+(((-1.0)*x1998))+(((-1.0)*x2035)))))+(IKabs((x2037+(((-1.0)*x1997))+(((-1.0)*x2034)))))+(IKabs((x2036+x1998+(((-1.0)*x2035)))))+(IKabs(((((-2.814)*x2001*x2002))+((x2002*x2003))+(((0.84)*r00*x2001))+(((-1.0)*x2004*x2009))+(((4.0)*x2012))+((r02*x2006))+(((-1.0)*r21*x2000*x2009))+(((0.84)*r01*x2000))+x1998+(((-0.02)*x2019)))))+(IKabs((x2037+x1997+(((-1.0)*x2034)))))+(IKabs((((r12*x2006))+(((0.02)*x2018))+(((0.84)*r11*x2000))+((r20*x2001*x2005))+(((-1.0)*x2003*x2010))+(((-4.0)*x2013))+(((-1.0)*x1997))+(((0.84)*r10*x2001))+((x2004*x2005))+((r21*x2000*x2005))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x2038=((2.2)*sj0);
IkReal x2039=(sj0*sj5);
IkReal x2040=((8.442)*sj4);
IkReal x2041=((2.814)*sj4);
IkReal x2042=(pz*sj0);
IkReal x2043=(cj4*r02);
IkReal x2044=((2.52)*sj4);
IkReal x2045=(r00*sj5);
IkReal x2046=(cj5*r01);
IkReal x2047=((0.84)*sj4);
IkReal x2048=((2.52)*x2043);
IkReal x2049=((12.0)*x2042);
IkReal x2050=((4.0)*x2042);
IkReal x2051=((0.84)*x2043);
IkReal x2052=(cj5*r21*sj0);
IkReal x2053=(cj4*r22*sj0);
IkReal x2054=(cj5*r20*sj0);
IkReal x2055=((0.06)*x2054);
IkReal x2056=(x2044*x2046);
IkReal x2057=(x2044*x2045);
IkReal x2058=((8.442)*x2053);
IkReal x2059=((0.06)*r21*x2039);
IkReal x2060=((0.02)*x2054);
IkReal x2061=(x2045*x2047);
IkReal x2062=(x2046*x2047);
IkReal x2063=((2.814)*x2053);
IkReal x2064=((0.02)*r21*x2039);
IkReal x2065=(x2040*x2052);
IkReal x2066=(r20*x2039*x2040);
IkReal x2067=(r20*x2039*x2041);
IkReal x2068=(x2041*x2052);
IkReal x2069=(x2060+x2061+x2062+x2051+x2050);
IkReal x2070=(x2065+x2066+x2059+x2058);
IkReal x2071=(x2068+x2063+x2064+x2067);
IkReal x2072=(x2048+x2049+x2055+x2057+x2056);
op[0]=(x2069+x2038+(((-1.0)*x2071)));
op[1]=0;
op[2]=(x2072+x2038+(((-1.0)*x2070)));
op[3]=0;
op[4]=(x2072+(((-1.0)*x2070))+(((-1.0)*x2038)));
op[5]=0;
op[6]=(x2069+(((-1.0)*x2071))+(((-1.0)*x2038)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2073=((2.2)*cj0);
IkReal x2074=(cj5*sj4);
IkReal x2075=(cj4*r12);
IkReal x2076=(cj0*pz);
IkReal x2077=(cj0*r21);
IkReal x2078=(cj0*r20);
IkReal x2079=(sj4*sj5);
IkReal x2080=((2.52)*x2075);
IkReal x2081=((12.0)*x2076);
IkReal x2082=((0.84)*x2075);
IkReal x2083=((4.0)*x2076);
IkReal x2084=(cj0*cj4*r22);
IkReal x2085=(sj5*x2077);
IkReal x2086=((2.814)*x2084);
IkReal x2087=((0.06)*x2085);
IkReal x2088=((2.52)*r10*x2079);
IkReal x2089=((2.52)*r11*x2074);
IkReal x2090=((8.442)*x2084);
IkReal x2091=((0.06)*cj5*x2078);
IkReal x2092=((0.02)*x2085);
IkReal x2093=((0.84)*r11*x2074);
IkReal x2094=((0.84)*r10*x2079);
IkReal x2095=((0.02)*cj5*x2078);
IkReal x2096=((2.814)*x2074*x2077);
IkReal x2097=((8.442)*x2078*x2079);
IkReal x2098=((8.442)*x2074*x2077);
IkReal x2099=((2.814)*x2078*x2079);
IkReal x2100=(x2095+x2083);
IkReal x2101=(x2091+x2081);
IkReal x2102=(x2097+x2090+x2098+x2088+x2089+x2080+x2087);
IkReal x2103=(x2094+x2096+x2093+x2092+x2099+x2082+x2086);
j1evalpoly[0]=((((htj1*htj1*htj1*htj1)*(((((-1.0)*x2101))+x2102+(((-1.0)*x2073))))))+(((-1.0)*x2100))+x2073+x2103+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x2100))+x2103+(((-1.0)*x2073))))))+(((htj1*htj1)*(((((-1.0)*x2101))+x2073+x2102)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2104=((1.0)*sj4);
IkReal x2105=(r20*sj5);
IkReal x2106=(cj1*cj3);
IkReal x2107=(cj5*r21);
IkReal x2108=(cj4*sj1);
IkReal x2109=(cj1*sj3);
IkReal x2110=(cj5*r20);
IkReal x2111=(cj1*sj4);
IkReal x2112=(sj1*sj3);
IkReal x2113=((1.0)*r21*sj5);
if( IKabs((((x2109*x2110))+(((-1.0)*r22*x2108))+(((-1.0)*sj1*x2104*x2105))+(((-1.0)*sj1*x2104*x2107))+(((-1.0)*r22*x2104*x2106))+((cj4*x2106*x2107))+((cj4*x2105*x2106))+(((-1.0)*x2109*x2113)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+(((-1.0)*x2112*x2113))+((cj3*x2107*x2108))+((x2105*x2111))+((x2107*x2111))+((x2110*x2112))+((cj3*x2105*x2108))+(((-1.0)*cj3*r22*sj1*x2104)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2109*x2110))+(((-1.0)*r22*x2108))+(((-1.0)*sj1*x2104*x2105))+(((-1.0)*sj1*x2104*x2107))+(((-1.0)*r22*x2104*x2106))+((cj4*x2106*x2107))+((cj4*x2105*x2106))+(((-1.0)*x2109*x2113))))+IKsqr((((cj1*cj4*r22))+(((-1.0)*x2112*x2113))+((cj3*x2107*x2108))+((x2105*x2111))+((x2107*x2111))+((x2110*x2112))+((cj3*x2105*x2108))+(((-1.0)*cj3*r22*sj1*x2104))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2109*x2110))+(((-1.0)*r22*x2108))+(((-1.0)*sj1*x2104*x2105))+(((-1.0)*sj1*x2104*x2107))+(((-1.0)*r22*x2104*x2106))+((cj4*x2106*x2107))+((cj4*x2105*x2106))+(((-1.0)*x2109*x2113))), (((cj1*cj4*r22))+(((-1.0)*x2112*x2113))+((cj3*x2107*x2108))+((x2105*x2111))+((x2107*x2111))+((x2110*x2112))+((cj3*x2105*x2108))+(((-1.0)*cj3*r22*sj1*x2104))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2114=IKsin(j2);
IkReal x2115=IKcos(j2);
IkReal x2116=(cj3*sj4);
IkReal x2117=((1.0)*cj5);
IkReal x2118=((0.21)*cj0);
IkReal x2119=(sj3*sj5);
IkReal x2120=(cj3*cj4);
IkReal x2121=((0.21)*sj0);
IkReal x2122=((1.0)*cj0);
IkReal x2123=((1.0)*sj5);
IkReal x2124=((1.0)*cj4);
IkReal x2125=((0.7035)*sj0);
IkReal x2126=((0.7035)*cj0);
IkReal x2127=((0.005)*sj5);
IkReal x2128=((0.005)*cj5);
IkReal x2129=((0.55)*sj1);
IkReal x2130=(cj1*x2115);
IkReal x2131=(sj1*x2114);
IkReal x2132=(cj1*x2114);
IkReal x2133=(sj1*x2115);
evalcond[0]=((((-1.0)*r20*sj4*x2123))+(((-1.0)*r22*x2124))+x2130+(((-1.0)*r21*sj4*x2117))+(((-1.0)*x2131)));
evalcond[1]=((((-1.0)*r01*sj4*x2117))+(((-1.0)*r00*sj4*x2123))+(((-1.0)*r02*x2124))+((sj0*x2133))+((sj0*x2132)));
evalcond[2]=((((-1.0)*r11*sj4*x2117))+(((-1.0)*r10*sj4*x2123))+(((-1.0)*r12*x2124))+(((-1.0)*x2122*x2133))+(((-1.0)*x2122*x2132)));
evalcond[3]=(((r21*x2119))+(((-1.0)*r20*sj3*x2117))+x2132+x2133+(((-1.0)*r20*x2120*x2123))+((r22*x2116))+(((-1.0)*r21*x2117*x2120)));
evalcond[4]=((((0.7035)*x2130))+((r21*x2127))+(((-1.0)*pz))+(((0.55)*cj1))+(((-0.21)*x2133))+(((-0.21)*x2132))+(((-1.0)*r20*x2128))+(((-0.7035)*x2131)));
evalcond[5]=((((-1.0)*r01*x2117*x2120))+((r01*x2119))+(((-1.0)*sj0*x2130))+(((-1.0)*r00*sj3*x2117))+((r02*x2116))+(((-1.0)*r00*x2120*x2123))+((sj0*x2131)));
evalcond[6]=(((r12*x2116))+((cj0*x2130))+(((-1.0)*r10*sj3*x2117))+(((-1.0)*r10*x2120*x2123))+(((-1.0)*r11*x2117*x2120))+(((-1.0)*x2122*x2131))+((r11*x2119)));
evalcond[7]=(((x2121*x2130))+(((-1.0)*x2121*x2131))+(((-1.0)*r00*x2128))+((sj0*x2129))+(((0.006)*cj0))+(((-1.0)*px))+((r01*x2127))+((x2125*x2133))+((x2125*x2132))+(((-0.165)*sj0)));
evalcond[8]=((((-1.0)*x2118*x2130))+(((-1.0)*r10*x2128))+((x2118*x2131))+((r11*x2127))+(((-1.0)*py))+(((0.165)*cj0))+(((-1.0)*x2126*x2132))+(((-1.0)*x2126*x2133))+(((0.006)*sj0))+(((-1.0)*cj0*x2129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - arm (0ba4219aa8d14b8025f24697a40b6672)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
